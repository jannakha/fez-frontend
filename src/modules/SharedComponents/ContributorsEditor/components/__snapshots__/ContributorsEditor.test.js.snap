// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ContributorsEditor chooses a contributor to edit 1`] = `
<div>
  <WithStyles(Grid)
    container={true}
    spacing={8}
  >
    <WithStyles(Grid)
      item={true}
      xs={12}
    >
      <WithStyles(List)
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <WithStyles(ContributorRowHeader)
          hideDelete={false}
          isInfinite={false}
          isNtro={false}
          onDeleteAll={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(List)>
      <WithStyles(List)
        classes={
          Object {
            "root": "list ",
          }
        }
      >
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={true}
          canMoveUp={false}
          contributor={
            Object {
              "nameAsPublished": "test1",
              "selected": false,
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={0}
          key="ContributorRow_0"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={true}
          canMoveUp={true}
          contributor={
            Object {
              "nameAsPublished": "test2",
              "selected": false,
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={1}
          key="ContributorRow_1"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={false}
          canMoveUp={true}
          contributor={
            Object {
              "nameAsPublished": "test3",
              "selected": false,
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={2}
          key="ContributorRow_2"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
      </WithStyles(List)>
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</div>
`;

exports[`ContributorsEditor chooses a contributor to edit 2`] = `
<div>
  <WithStyles(Grid)
    container={true}
    spacing={8}
  >
    <WithStyles(Grid)
      item={true}
      xs={12}
    >
      <WithStyles(List)
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <WithStyles(ContributorRowHeader)
          hideDelete={false}
          isInfinite={false}
          isNtro={false}
          onDeleteAll={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(List)>
      <WithStyles(List)
        classes={
          Object {
            "root": "list ",
          }
        }
      >
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={true}
          canMoveUp={false}
          contributor={
            Object {
              "nameAsPublished": "test1",
              "selected": false,
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={0}
          key="ContributorRow_0"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={true}
          canMoveUp={true}
          contributor={
            Object {
              "nameAsPublished": "test2",
              "selected": true,
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={1}
          key="ContributorRow_1"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={false}
          canMoveUp={true}
          contributor={
            Object {
              "nameAsPublished": "test3",
              "selected": false,
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={2}
          key="ContributorRow_2"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
      </WithStyles(List)>
      <div
        style={
          Object {
            "marginTop": 24,
          }
        }
      >
        <Connect(ContributorForm)
          author={
            Object {
              "aut_id": 1,
            }
          }
          classes={
            Object {
              "list": "list",
              "scroll": "scroll",
            }
          }
          contributor={
            Object {
              "nameAsPublished": "test2",
              "selected": true,
            }
          }
          disableNameAsPublished={true}
          editMode={true}
          enableUqIdentifierOnAffiliationChange={false}
          hideDelete={false}
          hideReorder={false}
          isContributorAssigned={true}
          isNtro={false}
          onSubmit={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </div>
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</div>
`;

exports[`ContributorsEditor renders 3 contributor rows with no infinite scroll 1`] = `
<div>
  <Connect(ContributorForm)
    author={
      Object {
        "aut_id": 1,
      }
    }
    classes={
      Object {
        "list": "list",
        "scroll": "scroll",
      }
    }
    contributors={Array []}
    editMode={false}
    hideDelete={false}
    hideReorder={false}
    isContributorAssigned={true}
    isNtro={false}
    onSubmit={[Function]}
    showContributorAssignment={false}
    showIdentifierLookup={false}
    showRoleInput={false}
  />
  <WithStyles(Grid)
    container={true}
    spacing={8}
  >
    <WithStyles(Grid)
      item={true}
      xs={12}
    >
      <WithStyles(List)
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <WithStyles(ContributorRowHeader)
          hideDelete={false}
          isInfinite={false}
          isNtro={false}
          onDeleteAll={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(List)>
      <WithStyles(List)
        classes={
          Object {
            "root": "list ",
          }
        }
      >
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={true}
          canMoveUp={false}
          contributor={
            Object {
              "nameAsPublished": 1,
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={0}
          key="ContributorRow_0"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={true}
          canMoveUp={true}
          contributor={
            Object {
              "nameAsPublished": 2,
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={1}
          key="ContributorRow_1"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={false}
          canMoveUp={true}
          contributor={
            Object {
              "nameAsPublished": 3,
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={2}
          key="ContributorRow_2"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
      </WithStyles(List)>
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</div>
`;

exports[`ContributorsEditor renders 4 contributor rows wrapped in an infinite scroll 1`] = `
<div>
  <Connect(ContributorForm)
    author={
      Object {
        "aut_id": 1,
      }
    }
    classes={
      Object {
        "list": "list",
        "scroll": "scroll",
      }
    }
    contributors={Array []}
    editMode={false}
    hideDelete={false}
    hideReorder={false}
    isContributorAssigned={true}
    isNtro={false}
    onSubmit={[Function]}
    showContributorAssignment={false}
    showIdentifierLookup={false}
    showRoleInput={false}
  />
  <WithStyles(Grid)
    container={true}
    spacing={8}
  >
    <WithStyles(Grid)
      item={true}
      xs={12}
    >
      <WithStyles(List)
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <WithStyles(ContributorRowHeader)
          hideDelete={false}
          isInfinite={true}
          isNtro={false}
          onDeleteAll={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(List)>
      <WithStyles(List)
        classes={
          Object {
            "root": "list scroll",
          }
        }
      >
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={true}
          canMoveUp={false}
          contributor={
            Object {
              "displayName": 1,
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={0}
          key="ContributorRow_0"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={true}
          canMoveUp={true}
          contributor={
            Object {
              "displayName": 2,
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={1}
          key="ContributorRow_1"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={true}
          canMoveUp={true}
          contributor={
            Object {
              "displayName": 3,
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={2}
          key="ContributorRow_2"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={false}
          canMoveUp={true}
          contributor={
            Object {
              "displayName": 4,
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={3}
          key="ContributorRow_3"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
      </WithStyles(List)>
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</div>
`;

exports[`ContributorsEditor renders component in edit mode 1`] = `
<div>
  
  <WithStyles(Grid)
    container={true}
    spacing={8}
  >
    <WithStyles(Grid)
      item={true}
      xs={12}
    >
      <WithStyles(List)
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <WithStyles(ContributorRowHeader)
          hideDelete={false}
          isInfinite={false}
          isNtro={false}
          onDeleteAll={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(List)>
      <WithStyles(List)
        classes={
          Object {
            "root": "list ",
          }
        }
      >
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={false}
          canMoveUp={false}
          contributor={
            Object {
              "selected": true,
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={0}
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
      </WithStyles(List)>
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</div>
`;

exports[`ContributorsEditor renders full component with NTRO fields 1`] = `
<Provider
  store={
    Object {
      "dispatch": [MockFunction],
      "getState": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
        ],
      },
      "subscribe": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <MuiThemeProvider
        theme={
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "up": [Function],
              "values": Object {
                "lg": 1280,
                "md": 960,
                "sm": 600,
                "xl": 1920,
                "xs": 0,
              },
              "width": [Function],
            },
            "direction": "ltr",
            "graphs": Object {
              "color1": "#d72865",
              "color2": "#1e7d94",
              "color3": "#49075E",
              "color4": "#468fcc",
              "color5": "#f28620",
              "color6": "#333333",
              "color7": "#595959",
            },
            "hexToRGBA": [Function],
            "mixins": Object {
              "gutters": [Function],
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "overrides": Object {
              "MuiFormLabel": Object {
                "root": Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                  "whiteSpace": "nowrap",
                  "width": "100%",
                },
              },
            },
            "palette": Object {
              "accent": Object {
                "dark": "#2a557d",
                "light": "#54acff",
                "main": "#4085C6",
              },
              "action": Object {
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "hover": "rgba(0, 0, 0, 0.08)",
                "hoverOpacity": 0.08,
                "selected": "rgba(0, 0, 0, 0.14)",
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fafafa",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "#790000",
                "light": "#ff0000",
                "main": "#c80000",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#f5f5f5",
                "200": "#eeeeee",
                "300": "#e0e0e0",
                "400": "#bdbdbd",
                "50": "#fafafa",
                "500": "#9e9e9e",
                "600": "#757575",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#d5d5d5",
                "A200": "#aaaaaa",
                "A400": "#303030",
                "A700": "#616161",
              },
              "primary": Object {
                "contrastText": "#fff",
                "dark": "#3b1a59",
                "gradient": Object {
                  "diagonal": Object {
                    "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                  "horizontal": Object {
                    "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                },
                "light": "#962A8B",
                "main": "#51247A",
              },
              "secondary": Object {
                "contrastText": "#fff",
                "dark": "#333333",
                "light": "#f2f2f2",
                "main": "#595959",
              },
              "success": Object {
                "dark": "#005000",
                "light": "#00a700",
                "main": "#007200",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "hint": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.54)",
              },
              "tonalOffset": 0.2,
              "type": "light",
              "warning": Object {
                "dark": "#542400",
                "light": "#ff9a57",
                "main": "#bf5000",
              },
              "white": Object {
                "main": "#FFFFFF",
              },
            },
            "props": Object {},
            "shadows": Array [
              "none",
              "0px 1px 3px 0px rgba(0, 0, 0, 0.2),0px 1px 1px 0px rgba(0, 0, 0, 0.14),0px 2px 1px -1px rgba(0, 0, 0, 0.12)",
              "0px 1px 5px 0px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0, 0, 0, 0.14),0px 3px 1px -2px rgba(0, 0, 0, 0.12)",
              "0px 1px 8px 0px rgba(0, 0, 0, 0.2),0px 3px 4px 0px rgba(0, 0, 0, 0.14),0px 3px 3px -2px rgba(0, 0, 0, 0.12)",
              "0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0, 0, 0, 0.12)",
              "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 5px 8px 0px rgba(0, 0, 0, 0.14),0px 1px 14px 0px rgba(0, 0, 0, 0.12)",
              "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 6px 10px 0px rgba(0, 0, 0, 0.14),0px 1px 18px 0px rgba(0, 0, 0, 0.12)",
              "0px 4px 5px -2px rgba(0, 0, 0, 0.2),0px 7px 10px 1px rgba(0, 0, 0, 0.14),0px 2px 16px 1px rgba(0, 0, 0, 0.12)",
              "0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0, 0, 0, 0.12)",
              "0px 5px 6px -3px rgba(0, 0, 0, 0.2),0px 9px 12px 1px rgba(0, 0, 0, 0.14),0px 3px 16px 2px rgba(0, 0, 0, 0.12)",
              "0px 6px 6px -3px rgba(0, 0, 0, 0.2),0px 10px 14px 1px rgba(0, 0, 0, 0.14),0px 4px 18px 3px rgba(0, 0, 0, 0.12)",
              "0px 6px 7px -4px rgba(0, 0, 0, 0.2),0px 11px 15px 1px rgba(0, 0, 0, 0.14),0px 4px 20px 3px rgba(0, 0, 0, 0.12)",
              "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 12px 17px 2px rgba(0, 0, 0, 0.14),0px 5px 22px 4px rgba(0, 0, 0, 0.12)",
              "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 13px 19px 2px rgba(0, 0, 0, 0.14),0px 5px 24px 4px rgba(0, 0, 0, 0.12)",
              "0px 7px 9px -4px rgba(0, 0, 0, 0.2),0px 14px 21px 2px rgba(0, 0, 0, 0.14),0px 5px 26px 4px rgba(0, 0, 0, 0.12)",
              "0px 8px 9px -5px rgba(0, 0, 0, 0.2),0px 15px 22px 2px rgba(0, 0, 0, 0.14),0px 6px 28px 5px rgba(0, 0, 0, 0.12)",
              "0px 8px 10px -5px rgba(0, 0, 0, 0.2),0px 16px 24px 2px rgba(0, 0, 0, 0.14),0px 6px 30px 5px rgba(0, 0, 0, 0.12)",
              "0px 8px 11px -5px rgba(0, 0, 0, 0.2),0px 17px 26px 2px rgba(0, 0, 0, 0.14),0px 6px 32px 5px rgba(0, 0, 0, 0.12)",
              "0px 9px 11px -5px rgba(0, 0, 0, 0.2),0px 18px 28px 2px rgba(0, 0, 0, 0.14),0px 7px 34px 6px rgba(0, 0, 0, 0.12)",
              "0px 9px 12px -6px rgba(0, 0, 0, 0.2),0px 19px 29px 2px rgba(0, 0, 0, 0.14),0px 7px 36px 6px rgba(0, 0, 0, 0.12)",
              "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 20px 31px 3px rgba(0, 0, 0, 0.14),0px 8px 38px 7px rgba(0, 0, 0, 0.12)",
              "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 21px 33px 3px rgba(0, 0, 0, 0.14),0px 8px 40px 7px rgba(0, 0, 0, 0.12)",
              "0px 10px 14px -6px rgba(0, 0, 0, 0.2),0px 22px 35px 3px rgba(0, 0, 0, 0.14),0px 8px 42px 7px rgba(0, 0, 0, 0.12)",
              "0px 11px 14px -7px rgba(0, 0, 0, 0.2),0px 23px 36px 3px rgba(0, 0, 0, 0.14),0px 9px 44px 8px rgba(0, 0, 0, 0.12)",
              "0px 11px 15px -7px rgba(0, 0, 0, 0.2),0px 24px 38px 3px rgba(0, 0, 0, 0.14),0px 9px 46px 8px rgba(0, 0, 0, 0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": Object {
              "unit": 8,
            },
            "status": Object {
              "danger": "#f44336",
              "warning": "#ff9800",
            },
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.5,
              },
              "body1Next": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.5,
              },
              "body2": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 300,
                "letterSpacing": "0.01071em",
                "lineHeight": 1.5,
              },
              "body2Next": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 300,
                "letterSpacing": "0.01071em",
                "lineHeight": 1.5,
              },
              "button": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.02857em",
                "lineHeight": 1.5,
                "textTransform": "uppercase",
              },
              "buttonNext": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.02857em",
                "lineHeight": 1.5,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.03333em",
                "lineHeight": 1.66,
              },
              "captionNext": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.03333em",
                "lineHeight": 1.66,
              },
              "display1": Object {
                "color": "rgba(0, 0, 0, 0.54)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 300,
                "lineHeight": "1.20588em",
              },
              "display2": Object {
                "color": "rgba(0, 0, 0, 0.54)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.8125rem",
                "fontWeight": 300,
                "lineHeight": "1.13333em",
                "marginLeft": "-.02em",
              },
              "display3": Object {
                "color": "rgba(0, 0, 0, 0.54)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.5rem",
                "fontWeight": 300,
                "letterSpacing": "-.02em",
                "lineHeight": "1.30357em",
                "marginLeft": "-.02em",
              },
              "display4": Object {
                "color": "rgba(0, 0, 0, 0.54)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "7rem",
                "fontWeight": 200,
                "letterSpacing": "-.04em",
                "lineHeight": "1.14286em",
                "marginLeft": "-.04em",
              },
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": 14,
              "fontWeightLight": 200,
              "fontWeightMedium": 400,
              "fontWeightRegular": 300,
              "h1": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "6rem",
                "fontWeight": 200,
                "letterSpacing": "-0.01562em",
                "lineHeight": 1,
              },
              "h2": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 200,
                "letterSpacing": "-0.00833em",
                "lineHeight": 1,
              },
              "h3": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.04,
              },
              "h4": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 300,
                "letterSpacing": "0.00735em",
                "lineHeight": 1.17,
              },
              "h5": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.33,
              },
              "h6": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.25rem",
                "fontWeight": 400,
                "letterSpacing": "0.0075em",
                "lineHeight": 1.6,
              },
              "headline": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 300,
                "lineHeight": "1.35417em",
              },
              "overline": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.08333em",
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "round": [Function],
              "subheading": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "lineHeight": "1.5em",
              },
              "subtitle1": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.00714em",
                "lineHeight": 1.57,
              },
              "suppressDeprecationWarnings": true,
              "title": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.3125rem",
                "fontWeight": 400,
                "lineHeight": "1.16667em",
              },
              "useNextVariants": true,
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "tooltip": 1500,
            },
          }
        }
      >
        <MuiPickersUtilsProvider
          utils={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "locale": undefined,
                    "moment": undefined,
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
        >
          <ContributorsEditor
            author={
              Object {
                "aut_id": 1,
              }
            }
            classes={
              Object {
                "list": "list",
                "scroll": "scroll",
              }
            }
            editMode={false}
            hideDelete={false}
            hideReorder={false}
            isNtro={true}
            locale={
              Object {
                "errorMessage": "Unable to add an item with the same identifier.",
                "errorTitle": "Error",
              }
            }
            showContributorAssignment={false}
            showIdentifierLookup={false}
            showRoleInput={false}
          >
            <div>
              <Connect(ContributorForm)
                author={
                  Object {
                    "aut_id": 1,
                  }
                }
                classes={
                  Object {
                    "list": "list",
                    "scroll": "scroll",
                  }
                }
                editMode={false}
                hideDelete={false}
                hideReorder={false}
                isContributorAssigned={false}
                isNtro={true}
                onSubmit={[Function]}
                showContributorAssignment={false}
                showIdentifierLookup={false}
                showRoleInput={false}
              >
                <ContributorForm
                  actions={
                    Object {
                      "linkAuthorOrcidId": [Function],
                      "resetSavingAuthorState": [Function],
                      "searchAuthors": [Function],
                      "updateCurrentAuthor": [Function],
                    }
                  }
                  author={
                    Object {
                      "aut_id": 1,
                    }
                  }
                  authorsList={Array []}
                  classes={
                    Object {
                      "list": "list",
                      "scroll": "scroll",
                    }
                  }
                  contributor={Object {}}
                  disableNameAsPublished={false}
                  editMode={false}
                  enableUqIdentifierOnAffiliationChange={true}
                  hideDelete={false}
                  hideReorder={false}
                  isContributorAssigned={false}
                  isNtro={true}
                  locale={
                    Object {
                      "addButton": "Add author",
                      "creatorRoleHint": "Role of the creator in relation to the dataset",
                      "creatorRoleLabel": "Creator role",
                      "descriptionStep1": <div>
                        <span
                          className="authorSteps"
                        >
                          Step 1 of 2
                        </span>
                        - Please 
                        <b>
                          add to a list of contributors below
                        </b>
                        , in the format and order that they are published.
                      </div>,
                      "descriptionStep1NoStep2": <div>
                        Please 
                        <b>
                          add to a list of contributors below
                        </b>
                        , in the format and order that they are published.
                      </div>,
                      "identifierLabel": "UQ identifier (if available)",
                      "nameAsPublishedHint": "Please type the name exactly as published",
                      "nameAsPublishedLabel": "Name as published",
                    }
                  }
                  onSubmit={[Function]}
                  required={false}
                  showContributorAssignment={false}
                  showIdentifierLookup={false}
                  showRoleInput={false}
                >
                  <div>
                    Please 
                    <b>
                      add to a list of contributors below
                    </b>
                    , in the format and order that they are published.
                  </div>
                  <WithStyles(Grid)
                    container={true}
                    spacing={8}
                    style={
                      Object {
                        "marginTop": 8,
                      }
                    }
                  >
                    <Grid
                      alignContent="stretch"
                      alignItems="stretch"
                      classes={
                        Object {
                          "align-content-xs-center": "MuiGrid-align-content-xs-center-13",
                          "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end-15",
                          "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start-14",
                          "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around-17",
                          "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between-16",
                          "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline-12",
                          "align-items-xs-center": "MuiGrid-align-items-xs-center-9",
                          "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end-11",
                          "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start-10",
                          "container": "MuiGrid-container-1",
                          "direction-xs-column": "MuiGrid-direction-xs-column-4",
                          "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse-5",
                          "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse-6",
                          "grid-lg-1": "MuiGrid-grid-lg-1-72",
                          "grid-lg-10": "MuiGrid-grid-lg-10-81",
                          "grid-lg-11": "MuiGrid-grid-lg-11-82",
                          "grid-lg-12": "MuiGrid-grid-lg-12-83",
                          "grid-lg-2": "MuiGrid-grid-lg-2-73",
                          "grid-lg-3": "MuiGrid-grid-lg-3-74",
                          "grid-lg-4": "MuiGrid-grid-lg-4-75",
                          "grid-lg-5": "MuiGrid-grid-lg-5-76",
                          "grid-lg-6": "MuiGrid-grid-lg-6-77",
                          "grid-lg-7": "MuiGrid-grid-lg-7-78",
                          "grid-lg-8": "MuiGrid-grid-lg-8-79",
                          "grid-lg-9": "MuiGrid-grid-lg-9-80",
                          "grid-lg-auto": "MuiGrid-grid-lg-auto-70",
                          "grid-lg-true": "MuiGrid-grid-lg-true-71",
                          "grid-md-1": "MuiGrid-grid-md-1-58",
                          "grid-md-10": "MuiGrid-grid-md-10-67",
                          "grid-md-11": "MuiGrid-grid-md-11-68",
                          "grid-md-12": "MuiGrid-grid-md-12-69",
                          "grid-md-2": "MuiGrid-grid-md-2-59",
                          "grid-md-3": "MuiGrid-grid-md-3-60",
                          "grid-md-4": "MuiGrid-grid-md-4-61",
                          "grid-md-5": "MuiGrid-grid-md-5-62",
                          "grid-md-6": "MuiGrid-grid-md-6-63",
                          "grid-md-7": "MuiGrid-grid-md-7-64",
                          "grid-md-8": "MuiGrid-grid-md-8-65",
                          "grid-md-9": "MuiGrid-grid-md-9-66",
                          "grid-md-auto": "MuiGrid-grid-md-auto-56",
                          "grid-md-true": "MuiGrid-grid-md-true-57",
                          "grid-sm-1": "MuiGrid-grid-sm-1-44",
                          "grid-sm-10": "MuiGrid-grid-sm-10-53",
                          "grid-sm-11": "MuiGrid-grid-sm-11-54",
                          "grid-sm-12": "MuiGrid-grid-sm-12-55",
                          "grid-sm-2": "MuiGrid-grid-sm-2-45",
                          "grid-sm-3": "MuiGrid-grid-sm-3-46",
                          "grid-sm-4": "MuiGrid-grid-sm-4-47",
                          "grid-sm-5": "MuiGrid-grid-sm-5-48",
                          "grid-sm-6": "MuiGrid-grid-sm-6-49",
                          "grid-sm-7": "MuiGrid-grid-sm-7-50",
                          "grid-sm-8": "MuiGrid-grid-sm-8-51",
                          "grid-sm-9": "MuiGrid-grid-sm-9-52",
                          "grid-sm-auto": "MuiGrid-grid-sm-auto-42",
                          "grid-sm-true": "MuiGrid-grid-sm-true-43",
                          "grid-xl-1": "MuiGrid-grid-xl-1-86",
                          "grid-xl-10": "MuiGrid-grid-xl-10-95",
                          "grid-xl-11": "MuiGrid-grid-xl-11-96",
                          "grid-xl-12": "MuiGrid-grid-xl-12-97",
                          "grid-xl-2": "MuiGrid-grid-xl-2-87",
                          "grid-xl-3": "MuiGrid-grid-xl-3-88",
                          "grid-xl-4": "MuiGrid-grid-xl-4-89",
                          "grid-xl-5": "MuiGrid-grid-xl-5-90",
                          "grid-xl-6": "MuiGrid-grid-xl-6-91",
                          "grid-xl-7": "MuiGrid-grid-xl-7-92",
                          "grid-xl-8": "MuiGrid-grid-xl-8-93",
                          "grid-xl-9": "MuiGrid-grid-xl-9-94",
                          "grid-xl-auto": "MuiGrid-grid-xl-auto-84",
                          "grid-xl-true": "MuiGrid-grid-xl-true-85",
                          "grid-xs-1": "MuiGrid-grid-xs-1-30",
                          "grid-xs-10": "MuiGrid-grid-xs-10-39",
                          "grid-xs-11": "MuiGrid-grid-xs-11-40",
                          "grid-xs-12": "MuiGrid-grid-xs-12-41",
                          "grid-xs-2": "MuiGrid-grid-xs-2-31",
                          "grid-xs-3": "MuiGrid-grid-xs-3-32",
                          "grid-xs-4": "MuiGrid-grid-xs-4-33",
                          "grid-xs-5": "MuiGrid-grid-xs-5-34",
                          "grid-xs-6": "MuiGrid-grid-xs-6-35",
                          "grid-xs-7": "MuiGrid-grid-xs-7-36",
                          "grid-xs-8": "MuiGrid-grid-xs-8-37",
                          "grid-xs-9": "MuiGrid-grid-xs-9-38",
                          "grid-xs-auto": "MuiGrid-grid-xs-auto-28",
                          "grid-xs-true": "MuiGrid-grid-xs-true-29",
                          "item": "MuiGrid-item-2",
                          "justify-xs-center": "MuiGrid-justify-xs-center-18",
                          "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end-19",
                          "justify-xs-space-around": "MuiGrid-justify-xs-space-around-21",
                          "justify-xs-space-between": "MuiGrid-justify-xs-space-between-20",
                          "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly-22",
                          "spacing-xs-16": "MuiGrid-spacing-xs-16-24",
                          "spacing-xs-24": "MuiGrid-spacing-xs-24-25",
                          "spacing-xs-32": "MuiGrid-spacing-xs-32-26",
                          "spacing-xs-40": "MuiGrid-spacing-xs-40-27",
                          "spacing-xs-8": "MuiGrid-spacing-xs-8-23",
                          "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap-7",
                          "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse-8",
                          "zeroMinWidth": "MuiGrid-zeroMinWidth-3",
                        }
                      }
                      component="div"
                      container={true}
                      direction="row"
                      item={false}
                      justify="flex-start"
                      lg={false}
                      md={false}
                      sm={false}
                      spacing={8}
                      style={
                        Object {
                          "marginTop": 8,
                        }
                      }
                      wrap="wrap"
                      xl={false}
                      xs={false}
                      zeroMinWidth={false}
                    >
                      <div
                        className="MuiGrid-container-1 MuiGrid-spacing-xs-8-23"
                        style={
                          Object {
                            "marginTop": 8,
                          }
                        }
                      >
                        <WithStyles(Grid)
                          item={true}
                          sm={2}
                          xs={12}
                        >
                          <Grid
                            alignContent="stretch"
                            alignItems="stretch"
                            classes={
                              Object {
                                "align-content-xs-center": "MuiGrid-align-content-xs-center-13",
                                "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end-15",
                                "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start-14",
                                "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around-17",
                                "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between-16",
                                "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline-12",
                                "align-items-xs-center": "MuiGrid-align-items-xs-center-9",
                                "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end-11",
                                "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start-10",
                                "container": "MuiGrid-container-1",
                                "direction-xs-column": "MuiGrid-direction-xs-column-4",
                                "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse-5",
                                "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse-6",
                                "grid-lg-1": "MuiGrid-grid-lg-1-72",
                                "grid-lg-10": "MuiGrid-grid-lg-10-81",
                                "grid-lg-11": "MuiGrid-grid-lg-11-82",
                                "grid-lg-12": "MuiGrid-grid-lg-12-83",
                                "grid-lg-2": "MuiGrid-grid-lg-2-73",
                                "grid-lg-3": "MuiGrid-grid-lg-3-74",
                                "grid-lg-4": "MuiGrid-grid-lg-4-75",
                                "grid-lg-5": "MuiGrid-grid-lg-5-76",
                                "grid-lg-6": "MuiGrid-grid-lg-6-77",
                                "grid-lg-7": "MuiGrid-grid-lg-7-78",
                                "grid-lg-8": "MuiGrid-grid-lg-8-79",
                                "grid-lg-9": "MuiGrid-grid-lg-9-80",
                                "grid-lg-auto": "MuiGrid-grid-lg-auto-70",
                                "grid-lg-true": "MuiGrid-grid-lg-true-71",
                                "grid-md-1": "MuiGrid-grid-md-1-58",
                                "grid-md-10": "MuiGrid-grid-md-10-67",
                                "grid-md-11": "MuiGrid-grid-md-11-68",
                                "grid-md-12": "MuiGrid-grid-md-12-69",
                                "grid-md-2": "MuiGrid-grid-md-2-59",
                                "grid-md-3": "MuiGrid-grid-md-3-60",
                                "grid-md-4": "MuiGrid-grid-md-4-61",
                                "grid-md-5": "MuiGrid-grid-md-5-62",
                                "grid-md-6": "MuiGrid-grid-md-6-63",
                                "grid-md-7": "MuiGrid-grid-md-7-64",
                                "grid-md-8": "MuiGrid-grid-md-8-65",
                                "grid-md-9": "MuiGrid-grid-md-9-66",
                                "grid-md-auto": "MuiGrid-grid-md-auto-56",
                                "grid-md-true": "MuiGrid-grid-md-true-57",
                                "grid-sm-1": "MuiGrid-grid-sm-1-44",
                                "grid-sm-10": "MuiGrid-grid-sm-10-53",
                                "grid-sm-11": "MuiGrid-grid-sm-11-54",
                                "grid-sm-12": "MuiGrid-grid-sm-12-55",
                                "grid-sm-2": "MuiGrid-grid-sm-2-45",
                                "grid-sm-3": "MuiGrid-grid-sm-3-46",
                                "grid-sm-4": "MuiGrid-grid-sm-4-47",
                                "grid-sm-5": "MuiGrid-grid-sm-5-48",
                                "grid-sm-6": "MuiGrid-grid-sm-6-49",
                                "grid-sm-7": "MuiGrid-grid-sm-7-50",
                                "grid-sm-8": "MuiGrid-grid-sm-8-51",
                                "grid-sm-9": "MuiGrid-grid-sm-9-52",
                                "grid-sm-auto": "MuiGrid-grid-sm-auto-42",
                                "grid-sm-true": "MuiGrid-grid-sm-true-43",
                                "grid-xl-1": "MuiGrid-grid-xl-1-86",
                                "grid-xl-10": "MuiGrid-grid-xl-10-95",
                                "grid-xl-11": "MuiGrid-grid-xl-11-96",
                                "grid-xl-12": "MuiGrid-grid-xl-12-97",
                                "grid-xl-2": "MuiGrid-grid-xl-2-87",
                                "grid-xl-3": "MuiGrid-grid-xl-3-88",
                                "grid-xl-4": "MuiGrid-grid-xl-4-89",
                                "grid-xl-5": "MuiGrid-grid-xl-5-90",
                                "grid-xl-6": "MuiGrid-grid-xl-6-91",
                                "grid-xl-7": "MuiGrid-grid-xl-7-92",
                                "grid-xl-8": "MuiGrid-grid-xl-8-93",
                                "grid-xl-9": "MuiGrid-grid-xl-9-94",
                                "grid-xl-auto": "MuiGrid-grid-xl-auto-84",
                                "grid-xl-true": "MuiGrid-grid-xl-true-85",
                                "grid-xs-1": "MuiGrid-grid-xs-1-30",
                                "grid-xs-10": "MuiGrid-grid-xs-10-39",
                                "grid-xs-11": "MuiGrid-grid-xs-11-40",
                                "grid-xs-12": "MuiGrid-grid-xs-12-41",
                                "grid-xs-2": "MuiGrid-grid-xs-2-31",
                                "grid-xs-3": "MuiGrid-grid-xs-3-32",
                                "grid-xs-4": "MuiGrid-grid-xs-4-33",
                                "grid-xs-5": "MuiGrid-grid-xs-5-34",
                                "grid-xs-6": "MuiGrid-grid-xs-6-35",
                                "grid-xs-7": "MuiGrid-grid-xs-7-36",
                                "grid-xs-8": "MuiGrid-grid-xs-8-37",
                                "grid-xs-9": "MuiGrid-grid-xs-9-38",
                                "grid-xs-auto": "MuiGrid-grid-xs-auto-28",
                                "grid-xs-true": "MuiGrid-grid-xs-true-29",
                                "item": "MuiGrid-item-2",
                                "justify-xs-center": "MuiGrid-justify-xs-center-18",
                                "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end-19",
                                "justify-xs-space-around": "MuiGrid-justify-xs-space-around-21",
                                "justify-xs-space-between": "MuiGrid-justify-xs-space-between-20",
                                "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly-22",
                                "spacing-xs-16": "MuiGrid-spacing-xs-16-24",
                                "spacing-xs-24": "MuiGrid-spacing-xs-24-25",
                                "spacing-xs-32": "MuiGrid-spacing-xs-32-26",
                                "spacing-xs-40": "MuiGrid-spacing-xs-40-27",
                                "spacing-xs-8": "MuiGrid-spacing-xs-8-23",
                                "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap-7",
                                "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse-8",
                                "zeroMinWidth": "MuiGrid-zeroMinWidth-3",
                              }
                            }
                            component="div"
                            container={false}
                            direction="row"
                            item={true}
                            justify="flex-start"
                            lg={false}
                            md={false}
                            sm={2}
                            spacing={0}
                            wrap="wrap"
                            xl={false}
                            xs={12}
                            zeroMinWidth={false}
                          >
                            <div
                              className="MuiGrid-item-2 MuiGrid-grid-xs-12-41 MuiGrid-grid-sm-2-45"
                            >
                              <OrgAffilicationTypeSelector
                                affiliation=""
                                error={false}
                                locale={
                                  Object {
                                    "inputLabel": "Org affiliation",
                                    "options": Array [
                                      Object {
                                        "key": "UQ",
                                        "value": "UQ",
                                      },
                                      Object {
                                        "key": "NotUQ",
                                        "value": "Not UQ",
                                      },
                                    ],
                                    "placeholder": "Organisational affiliation at time of publication",
                                  }
                                }
                                onAffiliationChange={[Function]}
                              >
                                <WithStyles(FormControl)
                                  fullWidth={true}
                                >
                                  <FormControl
                                    classes={
                                      Object {
                                        "fullWidth": "MuiFormControl-fullWidth-101",
                                        "marginDense": "MuiFormControl-marginDense-100",
                                        "marginNormal": "MuiFormControl-marginNormal-99",
                                        "root": "MuiFormControl-root-98",
                                      }
                                    }
                                    component="div"
                                    disabled={false}
                                    error={false}
                                    fullWidth={true}
                                    margin="none"
                                    required={false}
                                    variant="standard"
                                  >
                                    <div
                                      className="MuiFormControl-root-98 MuiFormControl-fullWidth-101"
                                    >
                                      <WithStyles(InputLabel)>
                                        <InputLabel
                                          classes={
                                            Object {
                                              "animated": "MuiInputLabel-animated-106",
                                              "filled": "MuiInputLabel-filled-107",
                                              "formControl": "MuiInputLabel-formControl-103",
                                              "marginDense": "MuiInputLabel-marginDense-104",
                                              "outlined": "MuiInputLabel-outlined-108",
                                              "root": "MuiInputLabel-root-102",
                                              "shrink": "MuiInputLabel-shrink-105",
                                            }
                                          }
                                          disableAnimation={false}
                                        >
                                          <WithStyles(FormLabel)
                                            className="MuiInputLabel-root-102 MuiInputLabel-formControl-103 MuiInputLabel-animated-106"
                                            data-shrink={false}
                                          >
                                            <FormLabel
                                              className="MuiInputLabel-root-102 MuiInputLabel-formControl-103 MuiInputLabel-animated-106"
                                              classes={
                                                Object {
                                                  "asterisk": "MuiFormLabel-asterisk-115",
                                                  "disabled": "MuiFormLabel-disabled-111",
                                                  "error": "MuiFormLabel-error-112",
                                                  "filled": "MuiFormLabel-filled-113",
                                                  "focused": "MuiFormLabel-focused-110",
                                                  "required": "MuiFormLabel-required-114",
                                                  "root": "MuiFormLabel-root-109",
                                                }
                                              }
                                              component="label"
                                              data-shrink={false}
                                            >
                                              <label
                                                className="MuiFormLabel-root-109 MuiInputLabel-root-102 MuiInputLabel-formControl-103 MuiInputLabel-animated-106"
                                                data-shrink={false}
                                              >
                                                Org affiliation
                                              </label>
                                            </FormLabel>
                                          </WithStyles(FormLabel)>
                                        </InputLabel>
                                      </WithStyles(InputLabel)>
                                      <WithStyles(Select)
                                        SelectDisplayProps={
                                          Object {
                                            "id": "org-affiliation-selector",
                                          }
                                        }
                                        error={false}
                                        onChange={[Function]}
                                        required={true}
                                        value=""
                                      >
                                        <Select
                                          IconComponent={[Function]}
                                          SelectDisplayProps={
                                            Object {
                                              "id": "org-affiliation-selector",
                                            }
                                          }
                                          autoWidth={false}
                                          classes={
                                            Object {
                                              "disabled": "MuiSelect-disabled-121",
                                              "filled": "MuiSelect-filled-118",
                                              "icon": "MuiSelect-icon-122",
                                              "outlined": "MuiSelect-outlined-119",
                                              "root": "MuiSelect-root-116",
                                              "select": "MuiSelect-select-117",
                                              "selectMenu": "MuiSelect-selectMenu-120",
                                            }
                                          }
                                          displayEmpty={false}
                                          error={false}
                                          input={<WithStyles(Input) />}
                                          multiple={false}
                                          native={false}
                                          onChange={[Function]}
                                          required={true}
                                          value=""
                                        >
                                          <WithStyles(Input)
                                            error={false}
                                            inputComponent={[Function]}
                                            inputProps={
                                              Object {
                                                "IconComponent": [Function],
                                                "MenuProps": undefined,
                                                "SelectDisplayProps": Object {
                                                  "id": "org-affiliation-selector",
                                                },
                                                "autoWidth": false,
                                                "children": Array [
                                                  <WithStyles(MenuItem)
                                                    disabled={true}
                                                    value=""
                                                  >
                                                    Organisational affiliation at time of publication
                                                  </WithStyles(MenuItem)>,
                                                  Array [
                                                    <WithStyles(MenuItem)
                                                      value="UQ"
                                                    >
                                                      UQ
                                                    </WithStyles(MenuItem)>,
                                                    <WithStyles(MenuItem)
                                                      value="NotUQ"
                                                    >
                                                      Not UQ
                                                    </WithStyles(MenuItem)>,
                                                  ],
                                                ],
                                                "classes": Object {
                                                  "disabled": "MuiSelect-disabled-121",
                                                  "filled": "MuiSelect-filled-118",
                                                  "icon": "MuiSelect-icon-122",
                                                  "outlined": "MuiSelect-outlined-119",
                                                  "root": "MuiSelect-root-116",
                                                  "select": "MuiSelect-select-117",
                                                  "selectMenu": "MuiSelect-selectMenu-120",
                                                },
                                                "displayEmpty": false,
                                                "multiple": false,
                                                "onClose": undefined,
                                                "onOpen": undefined,
                                                "open": undefined,
                                                "renderValue": undefined,
                                                "type": undefined,
                                                "variant": "standard",
                                              }
                                            }
                                            onChange={[Function]}
                                            required={true}
                                            value=""
                                          >
                                            <Input
                                              classes={
                                                Object {
                                                  "disabled": "MuiInput-disabled-126",
                                                  "error": "MuiInput-error-128",
                                                  "focused": "MuiInput-focused-125",
                                                  "formControl": "MuiInput-formControl-124",
                                                  "fullWidth": "MuiInput-fullWidth-130",
                                                  "input": "MuiInput-input-131",
                                                  "inputMarginDense": "MuiInput-inputMarginDense-132",
                                                  "inputMultiline": "MuiInput-inputMultiline-133",
                                                  "inputType": "MuiInput-inputType-134",
                                                  "inputTypeSearch": "MuiInput-inputTypeSearch-135",
                                                  "multiline": "MuiInput-multiline-129",
                                                  "root": "MuiInput-root-123",
                                                  "underline": "MuiInput-underline-127",
                                                }
                                              }
                                              error={false}
                                              inputComponent={[Function]}
                                              inputProps={
                                                Object {
                                                  "IconComponent": [Function],
                                                  "MenuProps": undefined,
                                                  "SelectDisplayProps": Object {
                                                    "id": "org-affiliation-selector",
                                                  },
                                                  "autoWidth": false,
                                                  "children": Array [
                                                    <WithStyles(MenuItem)
                                                      disabled={true}
                                                      value=""
                                                    >
                                                      Organisational affiliation at time of publication
                                                    </WithStyles(MenuItem)>,
                                                    Array [
                                                      <WithStyles(MenuItem)
                                                        value="UQ"
                                                      >
                                                        UQ
                                                      </WithStyles(MenuItem)>,
                                                      <WithStyles(MenuItem)
                                                        value="NotUQ"
                                                      >
                                                        Not UQ
                                                      </WithStyles(MenuItem)>,
                                                    ],
                                                  ],
                                                  "classes": Object {
                                                    "disabled": "MuiSelect-disabled-121",
                                                    "filled": "MuiSelect-filled-118",
                                                    "icon": "MuiSelect-icon-122",
                                                    "outlined": "MuiSelect-outlined-119",
                                                    "root": "MuiSelect-root-116",
                                                    "select": "MuiSelect-select-117",
                                                    "selectMenu": "MuiSelect-selectMenu-120",
                                                  },
                                                  "displayEmpty": false,
                                                  "multiple": false,
                                                  "onClose": undefined,
                                                  "onOpen": undefined,
                                                  "open": undefined,
                                                  "renderValue": undefined,
                                                  "type": undefined,
                                                  "variant": "standard",
                                                }
                                              }
                                              onChange={[Function]}
                                              required={true}
                                              value=""
                                            >
                                              <WithStyles(InputBase)
                                                classes={
                                                  Object {
                                                    "disabled": "MuiInput-disabled-126",
                                                    "error": "MuiInput-error-128",
                                                    "focused": "MuiInput-focused-125",
                                                    "formControl": "MuiInput-formControl-124",
                                                    "fullWidth": "MuiInput-fullWidth-130",
                                                    "input": "MuiInput-input-131",
                                                    "inputMarginDense": "MuiInput-inputMarginDense-132",
                                                    "inputMultiline": "MuiInput-inputMultiline-133",
                                                    "inputType": "MuiInput-inputType-134",
                                                    "inputTypeSearch": "MuiInput-inputTypeSearch-135",
                                                    "multiline": "MuiInput-multiline-129",
                                                    "root": "MuiInput-root-123 MuiInput-underline-127",
                                                    "underline": null,
                                                  }
                                                }
                                                error={false}
                                                fullWidth={false}
                                                inputComponent={[Function]}
                                                inputProps={
                                                  Object {
                                                    "IconComponent": [Function],
                                                    "MenuProps": undefined,
                                                    "SelectDisplayProps": Object {
                                                      "id": "org-affiliation-selector",
                                                    },
                                                    "autoWidth": false,
                                                    "children": Array [
                                                      <WithStyles(MenuItem)
                                                        disabled={true}
                                                        value=""
                                                      >
                                                        Organisational affiliation at time of publication
                                                      </WithStyles(MenuItem)>,
                                                      Array [
                                                        <WithStyles(MenuItem)
                                                          value="UQ"
                                                        >
                                                          UQ
                                                        </WithStyles(MenuItem)>,
                                                        <WithStyles(MenuItem)
                                                          value="NotUQ"
                                                        >
                                                          Not UQ
                                                        </WithStyles(MenuItem)>,
                                                      ],
                                                    ],
                                                    "classes": Object {
                                                      "disabled": "MuiSelect-disabled-121",
                                                      "filled": "MuiSelect-filled-118",
                                                      "icon": "MuiSelect-icon-122",
                                                      "outlined": "MuiSelect-outlined-119",
                                                      "root": "MuiSelect-root-116",
                                                      "select": "MuiSelect-select-117",
                                                      "selectMenu": "MuiSelect-selectMenu-120",
                                                    },
                                                    "displayEmpty": false,
                                                    "multiple": false,
                                                    "onClose": undefined,
                                                    "onOpen": undefined,
                                                    "open": undefined,
                                                    "renderValue": undefined,
                                                    "type": undefined,
                                                    "variant": "standard",
                                                  }
                                                }
                                                multiline={false}
                                                onChange={[Function]}
                                                required={true}
                                                type="text"
                                                value=""
                                              >
                                                <InputBase
                                                  classes={
                                                    Object {
                                                      "adornedEnd": "MuiInputBase-adornedEnd-141",
                                                      "adornedStart": "MuiInputBase-adornedStart-140",
                                                      "disabled": "MuiInputBase-disabled-139 MuiInput-disabled-126",
                                                      "error": "MuiInputBase-error-142 MuiInput-error-128",
                                                      "focused": "MuiInputBase-focused-138 MuiInput-focused-125",
                                                      "formControl": "MuiInputBase-formControl-137 MuiInput-formControl-124",
                                                      "fullWidth": "MuiInputBase-fullWidth-145 MuiInput-fullWidth-130",
                                                      "input": "MuiInputBase-input-146 MuiInput-input-131",
                                                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-152",
                                                      "inputAdornedStart": "MuiInputBase-inputAdornedStart-151",
                                                      "inputMarginDense": "MuiInputBase-inputMarginDense-147 MuiInput-inputMarginDense-132",
                                                      "inputMultiline": "MuiInputBase-inputMultiline-148 MuiInput-inputMultiline-133",
                                                      "inputType": "MuiInputBase-inputType-149 MuiInput-inputType-134",
                                                      "inputTypeSearch": "MuiInputBase-inputTypeSearch-150 MuiInput-inputTypeSearch-135",
                                                      "marginDense": "MuiInputBase-marginDense-143",
                                                      "multiline": "MuiInputBase-multiline-144 MuiInput-multiline-129",
                                                      "root": "MuiInputBase-root-136 MuiInput-root-123 MuiInput-underline-127",
                                                    }
                                                  }
                                                  error={false}
                                                  fullWidth={false}
                                                  inputComponent={[Function]}
                                                  inputProps={
                                                    Object {
                                                      "IconComponent": [Function],
                                                      "MenuProps": undefined,
                                                      "SelectDisplayProps": Object {
                                                        "id": "org-affiliation-selector",
                                                      },
                                                      "autoWidth": false,
                                                      "children": Array [
                                                        <WithStyles(MenuItem)
                                                          disabled={true}
                                                          value=""
                                                        >
                                                          Organisational affiliation at time of publication
                                                        </WithStyles(MenuItem)>,
                                                        Array [
                                                          <WithStyles(MenuItem)
                                                            value="UQ"
                                                          >
                                                            UQ
                                                          </WithStyles(MenuItem)>,
                                                          <WithStyles(MenuItem)
                                                            value="NotUQ"
                                                          >
                                                            Not UQ
                                                          </WithStyles(MenuItem)>,
                                                        ],
                                                      ],
                                                      "classes": Object {
                                                        "disabled": "MuiSelect-disabled-121",
                                                        "filled": "MuiSelect-filled-118",
                                                        "icon": "MuiSelect-icon-122",
                                                        "outlined": "MuiSelect-outlined-119",
                                                        "root": "MuiSelect-root-116",
                                                        "select": "MuiSelect-select-117",
                                                        "selectMenu": "MuiSelect-selectMenu-120",
                                                      },
                                                      "displayEmpty": false,
                                                      "multiple": false,
                                                      "onClose": undefined,
                                                      "onOpen": undefined,
                                                      "open": undefined,
                                                      "renderValue": undefined,
                                                      "type": undefined,
                                                      "variant": "standard",
                                                    }
                                                  }
                                                  multiline={false}
                                                  onChange={[Function]}
                                                  required={true}
                                                  type="text"
                                                  value=""
                                                >
                                                  <div
                                                    className="MuiInputBase-root-136 MuiInput-root-123 MuiInput-underline-127 MuiInputBase-formControl-137 MuiInput-formControl-124"
                                                    onClick={[Function]}
                                                    required={true}
                                                  >
                                                    <SelectInput
                                                      IconComponent={[Function]}
                                                      SelectDisplayProps={
                                                        Object {
                                                          "id": "org-affiliation-selector",
                                                        }
                                                      }
                                                      aria-invalid={false}
                                                      autoWidth={false}
                                                      className="MuiInputBase-input-146 MuiInput-input-131"
                                                      classes={
                                                        Object {
                                                          "disabled": "MuiSelect-disabled-121",
                                                          "filled": "MuiSelect-filled-118",
                                                          "icon": "MuiSelect-icon-122",
                                                          "outlined": "MuiSelect-outlined-119",
                                                          "root": "MuiSelect-root-116",
                                                          "select": "MuiSelect-select-117",
                                                          "selectMenu": "MuiSelect-selectMenu-120",
                                                        }
                                                      }
                                                      disabled={false}
                                                      displayEmpty={false}
                                                      inputRef={[Function]}
                                                      multiple={false}
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      required={true}
                                                      value=""
                                                      variant="standard"
                                                    >
                                                      <div
                                                        className="MuiSelect-root-116"
                                                      >
                                                        <div
                                                          aria-haspopup="true"
                                                          aria-owns={null}
                                                          aria-pressed="false"
                                                          className="MuiSelect-select-117 MuiSelect-selectMenu-120 MuiInputBase-input-146 MuiInput-input-131"
                                                          id="org-affiliation-selector"
                                                          onBlur={[Function]}
                                                          onClick={[Function]}
                                                          onFocus={[Function]}
                                                          onKeyDown={[Function]}
                                                          role="button"
                                                          tabIndex={0}
                                                        >
                                                          <span
                                                            dangerouslySetInnerHTML={
                                                              Object {
                                                                "__html": "&#8203;",
                                                              }
                                                            }
                                                          />
                                                        </div>
                                                        <input
                                                          type="hidden"
                                                          value=""
                                                        />
                                                        <pure(ArrowDropDown)
                                                          className="MuiSelect-icon-122"
                                                        >
                                                          <ArrowDropDown
                                                            className="MuiSelect-icon-122"
                                                          >
                                                            <WithStyles(SvgIcon)
                                                              className="MuiSelect-icon-122"
                                                            >
                                                              <SvgIcon
                                                                className="MuiSelect-icon-122"
                                                                classes={
                                                                  Object {
                                                                    "colorAction": "MuiSvgIcon-colorAction-156",
                                                                    "colorDisabled": "MuiSvgIcon-colorDisabled-158",
                                                                    "colorError": "MuiSvgIcon-colorError-157",
                                                                    "colorPrimary": "MuiSvgIcon-colorPrimary-154",
                                                                    "colorSecondary": "MuiSvgIcon-colorSecondary-155",
                                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit-159",
                                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge-161",
                                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall-160",
                                                                    "root": "MuiSvgIcon-root-153",
                                                                  }
                                                                }
                                                                color="inherit"
                                                                component="svg"
                                                                fontSize="default"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className="MuiSvgIcon-root-153 MuiSelect-icon-122"
                                                                  focusable="false"
                                                                  role="presentation"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <path
                                                                    d="M7 10l5 5 5-5z"
                                                                  />
                                                                </svg>
                                                              </SvgIcon>
                                                            </WithStyles(SvgIcon)>
                                                          </ArrowDropDown>
                                                        </pure(ArrowDropDown)>
                                                        <WithStyles(Menu)
                                                          MenuListProps={
                                                            Object {
                                                              "role": "listbox",
                                                            }
                                                          }
                                                          PaperProps={
                                                            Object {
                                                              "style": Object {
                                                                "minWidth": null,
                                                              },
                                                            }
                                                          }
                                                          id="menu-"
                                                          onClose={[Function]}
                                                          open={false}
                                                        >
                                                          <Menu
                                                            MenuListProps={
                                                              Object {
                                                                "role": "listbox",
                                                              }
                                                            }
                                                            PaperProps={
                                                              Object {
                                                                "style": Object {
                                                                  "minWidth": null,
                                                                },
                                                              }
                                                            }
                                                            classes={
                                                              Object {
                                                                "paper": "MuiMenu-paper-162",
                                                              }
                                                            }
                                                            disableAutoFocusItem={false}
                                                            id="menu-"
                                                            onClose={[Function]}
                                                            open={false}
                                                            theme={
                                                              Object {
                                                                "breakpoints": Object {
                                                                  "between": [Function],
                                                                  "down": [Function],
                                                                  "keys": Array [
                                                                    "xs",
                                                                    "sm",
                                                                    "md",
                                                                    "lg",
                                                                    "xl",
                                                                  ],
                                                                  "only": [Function],
                                                                  "up": [Function],
                                                                  "values": Object {
                                                                    "lg": 1280,
                                                                    "md": 960,
                                                                    "sm": 600,
                                                                    "xl": 1920,
                                                                    "xs": 0,
                                                                  },
                                                                  "width": [Function],
                                                                },
                                                                "direction": "ltr",
                                                                "graphs": Object {
                                                                  "color1": "#d72865",
                                                                  "color2": "#1e7d94",
                                                                  "color3": "#49075E",
                                                                  "color4": "#468fcc",
                                                                  "color5": "#f28620",
                                                                  "color6": "#333333",
                                                                  "color7": "#595959",
                                                                },
                                                                "hexToRGBA": [Function],
                                                                "mixins": Object {
                                                                  "gutters": [Function],
                                                                  "toolbar": Object {
                                                                    "@media (min-width:0px) and (orientation: landscape)": Object {
                                                                      "minHeight": 48,
                                                                    },
                                                                    "@media (min-width:600px)": Object {
                                                                      "minHeight": 64,
                                                                    },
                                                                    "minHeight": 56,
                                                                  },
                                                                },
                                                                "overrides": Object {
                                                                  "MuiFormLabel": Object {
                                                                    "root": Object {
                                                                      "overflow": "hidden",
                                                                      "textOverflow": "ellipsis",
                                                                      "whiteSpace": "nowrap",
                                                                      "width": "100%",
                                                                    },
                                                                  },
                                                                },
                                                                "palette": Object {
                                                                  "accent": Object {
                                                                    "dark": "#2a557d",
                                                                    "light": "#54acff",
                                                                    "main": "#4085C6",
                                                                  },
                                                                  "action": Object {
                                                                    "active": "rgba(0, 0, 0, 0.54)",
                                                                    "disabled": "rgba(0, 0, 0, 0.26)",
                                                                    "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                                                    "hover": "rgba(0, 0, 0, 0.08)",
                                                                    "hoverOpacity": 0.08,
                                                                    "selected": "rgba(0, 0, 0, 0.14)",
                                                                  },
                                                                  "augmentColor": [Function],
                                                                  "background": Object {
                                                                    "default": "#fafafa",
                                                                    "paper": "#fff",
                                                                  },
                                                                  "common": Object {
                                                                    "black": "#000",
                                                                    "white": "#fff",
                                                                  },
                                                                  "contrastThreshold": 3,
                                                                  "divider": "rgba(0, 0, 0, 0.12)",
                                                                  "error": Object {
                                                                    "contrastText": "#fff",
                                                                    "dark": "#790000",
                                                                    "light": "#ff0000",
                                                                    "main": "#c80000",
                                                                  },
                                                                  "getContrastText": [Function],
                                                                  "grey": Object {
                                                                    "100": "#f5f5f5",
                                                                    "200": "#eeeeee",
                                                                    "300": "#e0e0e0",
                                                                    "400": "#bdbdbd",
                                                                    "50": "#fafafa",
                                                                    "500": "#9e9e9e",
                                                                    "600": "#757575",
                                                                    "700": "#616161",
                                                                    "800": "#424242",
                                                                    "900": "#212121",
                                                                    "A100": "#d5d5d5",
                                                                    "A200": "#aaaaaa",
                                                                    "A400": "#303030",
                                                                    "A700": "#616161",
                                                                  },
                                                                  "primary": Object {
                                                                    "contrastText": "#fff",
                                                                    "dark": "#3b1a59",
                                                                    "gradient": Object {
                                                                      "diagonal": Object {
                                                                        "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                                                                        "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                                                                      },
                                                                      "horizontal": Object {
                                                                        "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                                                                        "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                                                                      },
                                                                    },
                                                                    "light": "#962A8B",
                                                                    "main": "#51247A",
                                                                  },
                                                                  "secondary": Object {
                                                                    "contrastText": "#fff",
                                                                    "dark": "#333333",
                                                                    "light": "#f2f2f2",
                                                                    "main": "#595959",
                                                                  },
                                                                  "success": Object {
                                                                    "dark": "#005000",
                                                                    "light": "#00a700",
                                                                    "main": "#007200",
                                                                  },
                                                                  "text": Object {
                                                                    "disabled": "rgba(0, 0, 0, 0.38)",
                                                                    "hint": "rgba(0, 0, 0, 0.38)",
                                                                    "primary": "rgba(0, 0, 0, 0.87)",
                                                                    "secondary": "rgba(0, 0, 0, 0.54)",
                                                                  },
                                                                  "tonalOffset": 0.2,
                                                                  "type": "light",
                                                                  "warning": Object {
                                                                    "dark": "#542400",
                                                                    "light": "#ff9a57",
                                                                    "main": "#bf5000",
                                                                  },
                                                                  "white": Object {
                                                                    "main": "#FFFFFF",
                                                                  },
                                                                },
                                                                "props": Object {},
                                                                "shadows": Array [
                                                                  "none",
                                                                  "0px 1px 3px 0px rgba(0, 0, 0, 0.2),0px 1px 1px 0px rgba(0, 0, 0, 0.14),0px 2px 1px -1px rgba(0, 0, 0, 0.12)",
                                                                  "0px 1px 5px 0px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0, 0, 0, 0.14),0px 3px 1px -2px rgba(0, 0, 0, 0.12)",
                                                                  "0px 1px 8px 0px rgba(0, 0, 0, 0.2),0px 3px 4px 0px rgba(0, 0, 0, 0.14),0px 3px 3px -2px rgba(0, 0, 0, 0.12)",
                                                                  "0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0, 0, 0, 0.12)",
                                                                  "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 5px 8px 0px rgba(0, 0, 0, 0.14),0px 1px 14px 0px rgba(0, 0, 0, 0.12)",
                                                                  "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 6px 10px 0px rgba(0, 0, 0, 0.14),0px 1px 18px 0px rgba(0, 0, 0, 0.12)",
                                                                  "0px 4px 5px -2px rgba(0, 0, 0, 0.2),0px 7px 10px 1px rgba(0, 0, 0, 0.14),0px 2px 16px 1px rgba(0, 0, 0, 0.12)",
                                                                  "0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0, 0, 0, 0.12)",
                                                                  "0px 5px 6px -3px rgba(0, 0, 0, 0.2),0px 9px 12px 1px rgba(0, 0, 0, 0.14),0px 3px 16px 2px rgba(0, 0, 0, 0.12)",
                                                                  "0px 6px 6px -3px rgba(0, 0, 0, 0.2),0px 10px 14px 1px rgba(0, 0, 0, 0.14),0px 4px 18px 3px rgba(0, 0, 0, 0.12)",
                                                                  "0px 6px 7px -4px rgba(0, 0, 0, 0.2),0px 11px 15px 1px rgba(0, 0, 0, 0.14),0px 4px 20px 3px rgba(0, 0, 0, 0.12)",
                                                                  "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 12px 17px 2px rgba(0, 0, 0, 0.14),0px 5px 22px 4px rgba(0, 0, 0, 0.12)",
                                                                  "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 13px 19px 2px rgba(0, 0, 0, 0.14),0px 5px 24px 4px rgba(0, 0, 0, 0.12)",
                                                                  "0px 7px 9px -4px rgba(0, 0, 0, 0.2),0px 14px 21px 2px rgba(0, 0, 0, 0.14),0px 5px 26px 4px rgba(0, 0, 0, 0.12)",
                                                                  "0px 8px 9px -5px rgba(0, 0, 0, 0.2),0px 15px 22px 2px rgba(0, 0, 0, 0.14),0px 6px 28px 5px rgba(0, 0, 0, 0.12)",
                                                                  "0px 8px 10px -5px rgba(0, 0, 0, 0.2),0px 16px 24px 2px rgba(0, 0, 0, 0.14),0px 6px 30px 5px rgba(0, 0, 0, 0.12)",
                                                                  "0px 8px 11px -5px rgba(0, 0, 0, 0.2),0px 17px 26px 2px rgba(0, 0, 0, 0.14),0px 6px 32px 5px rgba(0, 0, 0, 0.12)",
                                                                  "0px 9px 11px -5px rgba(0, 0, 0, 0.2),0px 18px 28px 2px rgba(0, 0, 0, 0.14),0px 7px 34px 6px rgba(0, 0, 0, 0.12)",
                                                                  "0px 9px 12px -6px rgba(0, 0, 0, 0.2),0px 19px 29px 2px rgba(0, 0, 0, 0.14),0px 7px 36px 6px rgba(0, 0, 0, 0.12)",
                                                                  "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 20px 31px 3px rgba(0, 0, 0, 0.14),0px 8px 38px 7px rgba(0, 0, 0, 0.12)",
                                                                  "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 21px 33px 3px rgba(0, 0, 0, 0.14),0px 8px 40px 7px rgba(0, 0, 0, 0.12)",
                                                                  "0px 10px 14px -6px rgba(0, 0, 0, 0.2),0px 22px 35px 3px rgba(0, 0, 0, 0.14),0px 8px 42px 7px rgba(0, 0, 0, 0.12)",
                                                                  "0px 11px 14px -7px rgba(0, 0, 0, 0.2),0px 23px 36px 3px rgba(0, 0, 0, 0.14),0px 9px 44px 8px rgba(0, 0, 0, 0.12)",
                                                                  "0px 11px 15px -7px rgba(0, 0, 0, 0.2),0px 24px 38px 3px rgba(0, 0, 0, 0.14),0px 9px 46px 8px rgba(0, 0, 0, 0.12)",
                                                                ],
                                                                "shape": Object {
                                                                  "borderRadius": 4,
                                                                },
                                                                "spacing": Object {
                                                                  "unit": 8,
                                                                },
                                                                "status": Object {
                                                                  "danger": "#f44336",
                                                                  "warning": "#ff9800",
                                                                },
                                                                "transitions": Object {
                                                                  "create": [Function],
                                                                  "duration": Object {
                                                                    "complex": 375,
                                                                    "enteringScreen": 225,
                                                                    "leavingScreen": 195,
                                                                    "short": 250,
                                                                    "shorter": 200,
                                                                    "shortest": 150,
                                                                    "standard": 300,
                                                                  },
                                                                  "easing": Object {
                                                                    "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                                                    "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                                                    "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                                                    "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                                                                  },
                                                                  "getAutoHeightDuration": [Function],
                                                                },
                                                                "typography": Object {
                                                                  "body1": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "1rem",
                                                                    "fontWeight": 300,
                                                                    "letterSpacing": "0.00938em",
                                                                    "lineHeight": 1.5,
                                                                  },
                                                                  "body1Next": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "1rem",
                                                                    "fontWeight": 300,
                                                                    "letterSpacing": "0.00938em",
                                                                    "lineHeight": 1.5,
                                                                  },
                                                                  "body2": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "0.875rem",
                                                                    "fontWeight": 300,
                                                                    "letterSpacing": "0.01071em",
                                                                    "lineHeight": 1.5,
                                                                  },
                                                                  "body2Next": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "0.875rem",
                                                                    "fontWeight": 300,
                                                                    "letterSpacing": "0.01071em",
                                                                    "lineHeight": 1.5,
                                                                  },
                                                                  "button": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "0.875rem",
                                                                    "fontWeight": 400,
                                                                    "letterSpacing": "0.02857em",
                                                                    "lineHeight": 1.5,
                                                                    "textTransform": "uppercase",
                                                                  },
                                                                  "buttonNext": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "0.875rem",
                                                                    "fontWeight": 400,
                                                                    "letterSpacing": "0.02857em",
                                                                    "lineHeight": 1.5,
                                                                    "textTransform": "uppercase",
                                                                  },
                                                                  "caption": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "0.75rem",
                                                                    "fontWeight": 300,
                                                                    "letterSpacing": "0.03333em",
                                                                    "lineHeight": 1.66,
                                                                  },
                                                                  "captionNext": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "0.75rem",
                                                                    "fontWeight": 300,
                                                                    "letterSpacing": "0.03333em",
                                                                    "lineHeight": 1.66,
                                                                  },
                                                                  "display1": Object {
                                                                    "color": "rgba(0, 0, 0, 0.54)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "2.125rem",
                                                                    "fontWeight": 300,
                                                                    "lineHeight": "1.20588em",
                                                                  },
                                                                  "display2": Object {
                                                                    "color": "rgba(0, 0, 0, 0.54)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "2.8125rem",
                                                                    "fontWeight": 300,
                                                                    "lineHeight": "1.13333em",
                                                                    "marginLeft": "-.02em",
                                                                  },
                                                                  "display3": Object {
                                                                    "color": "rgba(0, 0, 0, 0.54)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "3.5rem",
                                                                    "fontWeight": 300,
                                                                    "letterSpacing": "-.02em",
                                                                    "lineHeight": "1.30357em",
                                                                    "marginLeft": "-.02em",
                                                                  },
                                                                  "display4": Object {
                                                                    "color": "rgba(0, 0, 0, 0.54)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "7rem",
                                                                    "fontWeight": 200,
                                                                    "letterSpacing": "-.04em",
                                                                    "lineHeight": "1.14286em",
                                                                    "marginLeft": "-.04em",
                                                                  },
                                                                  "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                  "fontSize": 14,
                                                                  "fontWeightLight": 200,
                                                                  "fontWeightMedium": 400,
                                                                  "fontWeightRegular": 300,
                                                                  "h1": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "6rem",
                                                                    "fontWeight": 200,
                                                                    "letterSpacing": "-0.01562em",
                                                                    "lineHeight": 1,
                                                                  },
                                                                  "h2": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "3.75rem",
                                                                    "fontWeight": 200,
                                                                    "letterSpacing": "-0.00833em",
                                                                    "lineHeight": 1,
                                                                  },
                                                                  "h3": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "3rem",
                                                                    "fontWeight": 300,
                                                                    "letterSpacing": "0em",
                                                                    "lineHeight": 1.04,
                                                                  },
                                                                  "h4": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "2.125rem",
                                                                    "fontWeight": 300,
                                                                    "letterSpacing": "0.00735em",
                                                                    "lineHeight": 1.17,
                                                                  },
                                                                  "h5": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "1.5rem",
                                                                    "fontWeight": 300,
                                                                    "letterSpacing": "0em",
                                                                    "lineHeight": 1.33,
                                                                  },
                                                                  "h6": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "1.25rem",
                                                                    "fontWeight": 400,
                                                                    "letterSpacing": "0.0075em",
                                                                    "lineHeight": 1.6,
                                                                  },
                                                                  "headline": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "1.5rem",
                                                                    "fontWeight": 300,
                                                                    "lineHeight": "1.35417em",
                                                                  },
                                                                  "overline": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "0.75rem",
                                                                    "fontWeight": 300,
                                                                    "letterSpacing": "0.08333em",
                                                                    "lineHeight": 2.66,
                                                                    "textTransform": "uppercase",
                                                                  },
                                                                  "pxToRem": [Function],
                                                                  "round": [Function],
                                                                  "subheading": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "1rem",
                                                                    "fontWeight": 300,
                                                                    "lineHeight": "1.5em",
                                                                  },
                                                                  "subtitle1": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "1rem",
                                                                    "fontWeight": 300,
                                                                    "letterSpacing": "0.00938em",
                                                                    "lineHeight": 1.75,
                                                                  },
                                                                  "subtitle2": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "0.875rem",
                                                                    "fontWeight": 400,
                                                                    "letterSpacing": "0.00714em",
                                                                    "lineHeight": 1.57,
                                                                  },
                                                                  "suppressDeprecationWarnings": true,
                                                                  "title": Object {
                                                                    "color": "rgba(0, 0, 0, 0.87)",
                                                                    "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                                                    "fontSize": "1.3125rem",
                                                                    "fontWeight": 400,
                                                                    "lineHeight": "1.16667em",
                                                                  },
                                                                  "useNextVariants": true,
                                                                },
                                                                "zIndex": Object {
                                                                  "appBar": 1100,
                                                                  "drawer": 1200,
                                                                  "mobileStepper": 1000,
                                                                  "modal": 1300,
                                                                  "snackbar": 1400,
                                                                  "tooltip": 1500,
                                                                },
                                                              }
                                                            }
                                                            transitionDuration="auto"
                                                          >
                                                            <WithStyles(Popover)
                                                              PaperProps={
                                                                Object {
                                                                  "classes": Object {
                                                                    "root": "MuiMenu-paper-162",
                                                                  },
                                                                  "style": Object {
                                                                    "minWidth": null,
                                                                  },
                                                                }
                                                              }
                                                              anchorOrigin={
                                                                Object {
                                                                  "horizontal": "left",
                                                                  "vertical": "top",
                                                                }
                                                              }
                                                              getContentAnchorEl={[Function]}
                                                              id="menu-"
                                                              onClose={[Function]}
                                                              onEnter={[Function]}
                                                              open={false}
                                                              transformOrigin={
                                                                Object {
                                                                  "horizontal": "left",
                                                                  "vertical": "top",
                                                                }
                                                              }
                                                              transitionDuration="auto"
                                                            >
                                                              <Popover
                                                                PaperProps={
                                                                  Object {
                                                                    "classes": Object {
                                                                      "root": "MuiMenu-paper-162",
                                                                    },
                                                                    "style": Object {
                                                                      "minWidth": null,
                                                                    },
                                                                  }
                                                                }
                                                                TransitionComponent={[Function]}
                                                                anchorOrigin={
                                                                  Object {
                                                                    "horizontal": "left",
                                                                    "vertical": "top",
                                                                  }
                                                                }
                                                                anchorReference="anchorEl"
                                                                classes={
                                                                  Object {
                                                                    "paper": "MuiPopover-paper-163",
                                                                  }
                                                                }
                                                                elevation={8}
                                                                getContentAnchorEl={[Function]}
                                                                id="menu-"
                                                                marginThreshold={16}
                                                                onClose={[Function]}
                                                                onEnter={[Function]}
                                                                open={false}
                                                                transformOrigin={
                                                                  Object {
                                                                    "horizontal": "left",
                                                                    "vertical": "top",
                                                                  }
                                                                }
                                                                transitionDuration="auto"
                                                              >
                                                                <WithStyles(Modal)
                                                                  BackdropProps={
                                                                    Object {
                                                                      "invisible": true,
                                                                    }
                                                                  }
                                                                  id="menu-"
                                                                  onClose={[Function]}
                                                                  open={false}
                                                                >
                                                                  <Modal
                                                                    BackdropComponent={[Function]}
                                                                    BackdropProps={
                                                                      Object {
                                                                        "invisible": true,
                                                                      }
                                                                    }
                                                                    classes={
                                                                      Object {
                                                                        "hidden": "MuiModal-hidden-165",
                                                                        "root": "MuiModal-root-164",
                                                                      }
                                                                    }
                                                                    disableAutoFocus={false}
                                                                    disableBackdropClick={false}
                                                                    disableEnforceFocus={false}
                                                                    disableEscapeKeyDown={false}
                                                                    disablePortal={false}
                                                                    disableRestoreFocus={false}
                                                                    hideBackdrop={false}
                                                                    id="menu-"
                                                                    keepMounted={false}
                                                                    manager={
                                                                      ModalManager {
                                                                        "containers": Array [],
                                                                        "data": Array [],
                                                                        "handleContainerOverflow": true,
                                                                        "hideSiblingNodes": true,
                                                                        "modals": Array [],
                                                                      }
                                                                    }
                                                                    onClose={[Function]}
                                                                    open={false}
                                                                  />
                                                                </WithStyles(Modal)>
                                                              </Popover>
                                                            </WithStyles(Popover)>
                                                          </Menu>
                                                        </WithStyles(Menu)>
                                                      </div>
                                                    </SelectInput>
                                                  </div>
                                                </InputBase>
                                              </WithStyles(InputBase)>
                                            </Input>
                                          </WithStyles(Input)>
                                        </Select>
                                      </WithStyles(Select)>
                                    </div>
                                  </FormControl>
                                </WithStyles(FormControl)>
                              </OrgAffilicationTypeSelector>
                            </div>
                          </Grid>
                        </WithStyles(Grid)>
                        <WithStyles(Grid)
                          item={true}
                          sm={true}
                          xs={12}
                        >
                          <Grid
                            alignContent="stretch"
                            alignItems="stretch"
                            classes={
                              Object {
                                "align-content-xs-center": "MuiGrid-align-content-xs-center-13",
                                "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end-15",
                                "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start-14",
                                "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around-17",
                                "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between-16",
                                "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline-12",
                                "align-items-xs-center": "MuiGrid-align-items-xs-center-9",
                                "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end-11",
                                "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start-10",
                                "container": "MuiGrid-container-1",
                                "direction-xs-column": "MuiGrid-direction-xs-column-4",
                                "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse-5",
                                "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse-6",
                                "grid-lg-1": "MuiGrid-grid-lg-1-72",
                                "grid-lg-10": "MuiGrid-grid-lg-10-81",
                                "grid-lg-11": "MuiGrid-grid-lg-11-82",
                                "grid-lg-12": "MuiGrid-grid-lg-12-83",
                                "grid-lg-2": "MuiGrid-grid-lg-2-73",
                                "grid-lg-3": "MuiGrid-grid-lg-3-74",
                                "grid-lg-4": "MuiGrid-grid-lg-4-75",
                                "grid-lg-5": "MuiGrid-grid-lg-5-76",
                                "grid-lg-6": "MuiGrid-grid-lg-6-77",
                                "grid-lg-7": "MuiGrid-grid-lg-7-78",
                                "grid-lg-8": "MuiGrid-grid-lg-8-79",
                                "grid-lg-9": "MuiGrid-grid-lg-9-80",
                                "grid-lg-auto": "MuiGrid-grid-lg-auto-70",
                                "grid-lg-true": "MuiGrid-grid-lg-true-71",
                                "grid-md-1": "MuiGrid-grid-md-1-58",
                                "grid-md-10": "MuiGrid-grid-md-10-67",
                                "grid-md-11": "MuiGrid-grid-md-11-68",
                                "grid-md-12": "MuiGrid-grid-md-12-69",
                                "grid-md-2": "MuiGrid-grid-md-2-59",
                                "grid-md-3": "MuiGrid-grid-md-3-60",
                                "grid-md-4": "MuiGrid-grid-md-4-61",
                                "grid-md-5": "MuiGrid-grid-md-5-62",
                                "grid-md-6": "MuiGrid-grid-md-6-63",
                                "grid-md-7": "MuiGrid-grid-md-7-64",
                                "grid-md-8": "MuiGrid-grid-md-8-65",
                                "grid-md-9": "MuiGrid-grid-md-9-66",
                                "grid-md-auto": "MuiGrid-grid-md-auto-56",
                                "grid-md-true": "MuiGrid-grid-md-true-57",
                                "grid-sm-1": "MuiGrid-grid-sm-1-44",
                                "grid-sm-10": "MuiGrid-grid-sm-10-53",
                                "grid-sm-11": "MuiGrid-grid-sm-11-54",
                                "grid-sm-12": "MuiGrid-grid-sm-12-55",
                                "grid-sm-2": "MuiGrid-grid-sm-2-45",
                                "grid-sm-3": "MuiGrid-grid-sm-3-46",
                                "grid-sm-4": "MuiGrid-grid-sm-4-47",
                                "grid-sm-5": "MuiGrid-grid-sm-5-48",
                                "grid-sm-6": "MuiGrid-grid-sm-6-49",
                                "grid-sm-7": "MuiGrid-grid-sm-7-50",
                                "grid-sm-8": "MuiGrid-grid-sm-8-51",
                                "grid-sm-9": "MuiGrid-grid-sm-9-52",
                                "grid-sm-auto": "MuiGrid-grid-sm-auto-42",
                                "grid-sm-true": "MuiGrid-grid-sm-true-43",
                                "grid-xl-1": "MuiGrid-grid-xl-1-86",
                                "grid-xl-10": "MuiGrid-grid-xl-10-95",
                                "grid-xl-11": "MuiGrid-grid-xl-11-96",
                                "grid-xl-12": "MuiGrid-grid-xl-12-97",
                                "grid-xl-2": "MuiGrid-grid-xl-2-87",
                                "grid-xl-3": "MuiGrid-grid-xl-3-88",
                                "grid-xl-4": "MuiGrid-grid-xl-4-89",
                                "grid-xl-5": "MuiGrid-grid-xl-5-90",
                                "grid-xl-6": "MuiGrid-grid-xl-6-91",
                                "grid-xl-7": "MuiGrid-grid-xl-7-92",
                                "grid-xl-8": "MuiGrid-grid-xl-8-93",
                                "grid-xl-9": "MuiGrid-grid-xl-9-94",
                                "grid-xl-auto": "MuiGrid-grid-xl-auto-84",
                                "grid-xl-true": "MuiGrid-grid-xl-true-85",
                                "grid-xs-1": "MuiGrid-grid-xs-1-30",
                                "grid-xs-10": "MuiGrid-grid-xs-10-39",
                                "grid-xs-11": "MuiGrid-grid-xs-11-40",
                                "grid-xs-12": "MuiGrid-grid-xs-12-41",
                                "grid-xs-2": "MuiGrid-grid-xs-2-31",
                                "grid-xs-3": "MuiGrid-grid-xs-3-32",
                                "grid-xs-4": "MuiGrid-grid-xs-4-33",
                                "grid-xs-5": "MuiGrid-grid-xs-5-34",
                                "grid-xs-6": "MuiGrid-grid-xs-6-35",
                                "grid-xs-7": "MuiGrid-grid-xs-7-36",
                                "grid-xs-8": "MuiGrid-grid-xs-8-37",
                                "grid-xs-9": "MuiGrid-grid-xs-9-38",
                                "grid-xs-auto": "MuiGrid-grid-xs-auto-28",
                                "grid-xs-true": "MuiGrid-grid-xs-true-29",
                                "item": "MuiGrid-item-2",
                                "justify-xs-center": "MuiGrid-justify-xs-center-18",
                                "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end-19",
                                "justify-xs-space-around": "MuiGrid-justify-xs-space-around-21",
                                "justify-xs-space-between": "MuiGrid-justify-xs-space-between-20",
                                "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly-22",
                                "spacing-xs-16": "MuiGrid-spacing-xs-16-24",
                                "spacing-xs-24": "MuiGrid-spacing-xs-24-25",
                                "spacing-xs-32": "MuiGrid-spacing-xs-32-26",
                                "spacing-xs-40": "MuiGrid-spacing-xs-40-27",
                                "spacing-xs-8": "MuiGrid-spacing-xs-8-23",
                                "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap-7",
                                "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse-8",
                                "zeroMinWidth": "MuiGrid-zeroMinWidth-3",
                              }
                            }
                            component="div"
                            container={false}
                            direction="row"
                            item={true}
                            justify="flex-start"
                            lg={false}
                            md={false}
                            sm={true}
                            spacing={0}
                            wrap="wrap"
                            xl={false}
                            xs={12}
                            zeroMinWidth={false}
                          >
                            <div
                              className="MuiGrid-item-2 MuiGrid-grid-xs-12-41 MuiGrid-grid-sm-true-43"
                            >
                              <WithStyles(TextFieldWrapper)
                                autoComplete="off"
                                disabled={true}
                                error={false}
                                fullWidth={true}
                                id="nameAsPublishedField"
                                label="Name as published"
                                onChange={[Function]}
                                onKeyDown={[Function]}
                                placeholder="Please type the name exactly as published"
                                required={false}
                                value=""
                              >
                                <TextFieldWrapper
                                  autoComplete="off"
                                  classes={Object {}}
                                  disabled={true}
                                  error={false}
                                  fullWidth={true}
                                  id="nameAsPublishedField"
                                  label="Name as published"
                                  onChange={[Function]}
                                  onKeyDown={[Function]}
                                  placeholder="Please type the name exactly as published"
                                  required={false}
                                  value=""
                                >
                                  <TextField
                                    InputLabelProps={null}
                                    autoComplete="off"
                                    classes={Object {}}
                                    disabled={true}
                                    error={false}
                                    fullWidth={true}
                                    id="nameAsPublishedField"
                                    label="Name as published"
                                    onChange={[Function]}
                                    onKeyDown={[Function]}
                                    placeholder="Please type the name exactly as published"
                                    required={false}
                                    select={false}
                                    value=""
                                    variant="standard"
                                  >
                                    <WithStyles(FormControl)
                                      classes={Object {}}
                                      disabled={true}
                                      error={false}
                                      fullWidth={true}
                                      onKeyDown={[Function]}
                                      required={false}
                                      variant="standard"
                                    >
                                      <FormControl
                                        classes={
                                          Object {
                                            "fullWidth": "MuiFormControl-fullWidth-101",
                                            "marginDense": "MuiFormControl-marginDense-100",
                                            "marginNormal": "MuiFormControl-marginNormal-99",
                                            "root": "MuiFormControl-root-98",
                                          }
                                        }
                                        component="div"
                                        disabled={true}
                                        error={false}
                                        fullWidth={true}
                                        margin="none"
                                        onKeyDown={[Function]}
                                        required={false}
                                        variant="standard"
                                      >
                                        <div
                                          className="MuiFormControl-root-98 MuiFormControl-fullWidth-101"
                                          onKeyDown={[Function]}
                                        >
                                          <WithStyles(InputLabel)
                                            htmlFor="nameAsPublishedField"
                                          >
                                            <InputLabel
                                              classes={
                                                Object {
                                                  "animated": "MuiInputLabel-animated-106",
                                                  "filled": "MuiInputLabel-filled-107",
                                                  "formControl": "MuiInputLabel-formControl-103",
                                                  "marginDense": "MuiInputLabel-marginDense-104",
                                                  "outlined": "MuiInputLabel-outlined-108",
                                                  "root": "MuiInputLabel-root-102",
                                                  "shrink": "MuiInputLabel-shrink-105",
                                                }
                                              }
                                              disableAnimation={false}
                                              htmlFor="nameAsPublishedField"
                                            >
                                              <WithStyles(FormLabel)
                                                className="MuiInputLabel-root-102 MuiInputLabel-formControl-103 MuiInputLabel-animated-106"
                                                data-shrink={false}
                                                htmlFor="nameAsPublishedField"
                                              >
                                                <FormLabel
                                                  className="MuiInputLabel-root-102 MuiInputLabel-formControl-103 MuiInputLabel-animated-106"
                                                  classes={
                                                    Object {
                                                      "asterisk": "MuiFormLabel-asterisk-115",
                                                      "disabled": "MuiFormLabel-disabled-111",
                                                      "error": "MuiFormLabel-error-112",
                                                      "filled": "MuiFormLabel-filled-113",
                                                      "focused": "MuiFormLabel-focused-110",
                                                      "required": "MuiFormLabel-required-114",
                                                      "root": "MuiFormLabel-root-109",
                                                    }
                                                  }
                                                  component="label"
                                                  data-shrink={false}
                                                  htmlFor="nameAsPublishedField"
                                                >
                                                  <label
                                                    className="MuiFormLabel-root-109 MuiFormLabel-disabled-111 MuiInputLabel-root-102 MuiInputLabel-formControl-103 MuiInputLabel-animated-106"
                                                    data-shrink={false}
                                                    htmlFor="nameAsPublishedField"
                                                  >
                                                    Name as published
                                                  </label>
                                                </FormLabel>
                                              </WithStyles(FormLabel)>
                                            </InputLabel>
                                          </WithStyles(InputLabel)>
                                          <WithStyles(Input)
                                            autoComplete="off"
                                            fullWidth={true}
                                            id="nameAsPublishedField"
                                            onChange={[Function]}
                                            placeholder="Please type the name exactly as published"
                                            value=""
                                          >
                                            <Input
                                              autoComplete="off"
                                              classes={
                                                Object {
                                                  "disabled": "MuiInput-disabled-126",
                                                  "error": "MuiInput-error-128",
                                                  "focused": "MuiInput-focused-125",
                                                  "formControl": "MuiInput-formControl-124",
                                                  "fullWidth": "MuiInput-fullWidth-130",
                                                  "input": "MuiInput-input-131",
                                                  "inputMarginDense": "MuiInput-inputMarginDense-132",
                                                  "inputMultiline": "MuiInput-inputMultiline-133",
                                                  "inputType": "MuiInput-inputType-134",
                                                  "inputTypeSearch": "MuiInput-inputTypeSearch-135",
                                                  "multiline": "MuiInput-multiline-129",
                                                  "root": "MuiInput-root-123",
                                                  "underline": "MuiInput-underline-127",
                                                }
                                              }
                                              fullWidth={true}
                                              id="nameAsPublishedField"
                                              onChange={[Function]}
                                              placeholder="Please type the name exactly as published"
                                              value=""
                                            >
                                              <WithStyles(InputBase)
                                                autoComplete="off"
                                                classes={
                                                  Object {
                                                    "disabled": "MuiInput-disabled-126",
                                                    "error": "MuiInput-error-128",
                                                    "focused": "MuiInput-focused-125",
                                                    "formControl": "MuiInput-formControl-124",
                                                    "fullWidth": "MuiInput-fullWidth-130",
                                                    "input": "MuiInput-input-131",
                                                    "inputMarginDense": "MuiInput-inputMarginDense-132",
                                                    "inputMultiline": "MuiInput-inputMultiline-133",
                                                    "inputType": "MuiInput-inputType-134",
                                                    "inputTypeSearch": "MuiInput-inputTypeSearch-135",
                                                    "multiline": "MuiInput-multiline-129",
                                                    "root": "MuiInput-root-123 MuiInput-underline-127",
                                                    "underline": null,
                                                  }
                                                }
                                                fullWidth={true}
                                                id="nameAsPublishedField"
                                                inputComponent="input"
                                                multiline={false}
                                                onChange={[Function]}
                                                placeholder="Please type the name exactly as published"
                                                type="text"
                                                value=""
                                              >
                                                <InputBase
                                                  autoComplete="off"
                                                  classes={
                                                    Object {
                                                      "adornedEnd": "MuiInputBase-adornedEnd-141",
                                                      "adornedStart": "MuiInputBase-adornedStart-140",
                                                      "disabled": "MuiInputBase-disabled-139 MuiInput-disabled-126",
                                                      "error": "MuiInputBase-error-142 MuiInput-error-128",
                                                      "focused": "MuiInputBase-focused-138 MuiInput-focused-125",
                                                      "formControl": "MuiInputBase-formControl-137 MuiInput-formControl-124",
                                                      "fullWidth": "MuiInputBase-fullWidth-145 MuiInput-fullWidth-130",
                                                      "input": "MuiInputBase-input-146 MuiInput-input-131",
                                                      "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-152",
                                                      "inputAdornedStart": "MuiInputBase-inputAdornedStart-151",
                                                      "inputMarginDense": "MuiInputBase-inputMarginDense-147 MuiInput-inputMarginDense-132",
                                                      "inputMultiline": "MuiInputBase-inputMultiline-148 MuiInput-inputMultiline-133",
                                                      "inputType": "MuiInputBase-inputType-149 MuiInput-inputType-134",
                                                      "inputTypeSearch": "MuiInputBase-inputTypeSearch-150 MuiInput-inputTypeSearch-135",
                                                      "marginDense": "MuiInputBase-marginDense-143",
                                                      "multiline": "MuiInputBase-multiline-144 MuiInput-multiline-129",
                                                      "root": "MuiInputBase-root-136 MuiInput-root-123 MuiInput-underline-127",
                                                    }
                                                  }
                                                  fullWidth={true}
                                                  id="nameAsPublishedField"
                                                  inputComponent="input"
                                                  multiline={false}
                                                  onChange={[Function]}
                                                  placeholder="Please type the name exactly as published"
                                                  type="text"
                                                  value=""
                                                >
                                                  <div
                                                    className="MuiInputBase-root-136 MuiInput-root-123 MuiInput-underline-127 MuiInputBase-disabled-139 MuiInput-disabled-126 MuiInputBase-fullWidth-145 MuiInput-fullWidth-130 MuiInputBase-formControl-137 MuiInput-formControl-124"
                                                    onClick={[Function]}
                                                  >
                                                    <input
                                                      aria-invalid={false}
                                                      autoComplete="off"
                                                      className="MuiInputBase-input-146 MuiInput-input-131 MuiInputBase-disabled-139 MuiInput-disabled-126"
                                                      disabled={true}
                                                      id="nameAsPublishedField"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      placeholder="Please type the name exactly as published"
                                                      required={false}
                                                      type="text"
                                                      value=""
                                                    />
                                                  </div>
                                                </InputBase>
                                              </WithStyles(InputBase)>
                                            </Input>
                                          </WithStyles(Input)>
                                        </div>
                                      </FormControl>
                                    </WithStyles(FormControl)>
                                  </TextField>
                                </TextFieldWrapper>
                              </WithStyles(TextFieldWrapper)>
                            </div>
                          </Grid>
                        </WithStyles(Grid)>
                        <WithStyles(Grid)
                          item={true}
                          style={
                            Object {
                              "marginBottom": 8,
                            }
                          }
                          xs={12}
                        >
                          <Grid
                            alignContent="stretch"
                            alignItems="stretch"
                            classes={
                              Object {
                                "align-content-xs-center": "MuiGrid-align-content-xs-center-13",
                                "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end-15",
                                "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start-14",
                                "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around-17",
                                "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between-16",
                                "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline-12",
                                "align-items-xs-center": "MuiGrid-align-items-xs-center-9",
                                "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end-11",
                                "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start-10",
                                "container": "MuiGrid-container-1",
                                "direction-xs-column": "MuiGrid-direction-xs-column-4",
                                "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse-5",
                                "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse-6",
                                "grid-lg-1": "MuiGrid-grid-lg-1-72",
                                "grid-lg-10": "MuiGrid-grid-lg-10-81",
                                "grid-lg-11": "MuiGrid-grid-lg-11-82",
                                "grid-lg-12": "MuiGrid-grid-lg-12-83",
                                "grid-lg-2": "MuiGrid-grid-lg-2-73",
                                "grid-lg-3": "MuiGrid-grid-lg-3-74",
                                "grid-lg-4": "MuiGrid-grid-lg-4-75",
                                "grid-lg-5": "MuiGrid-grid-lg-5-76",
                                "grid-lg-6": "MuiGrid-grid-lg-6-77",
                                "grid-lg-7": "MuiGrid-grid-lg-7-78",
                                "grid-lg-8": "MuiGrid-grid-lg-8-79",
                                "grid-lg-9": "MuiGrid-grid-lg-9-80",
                                "grid-lg-auto": "MuiGrid-grid-lg-auto-70",
                                "grid-lg-true": "MuiGrid-grid-lg-true-71",
                                "grid-md-1": "MuiGrid-grid-md-1-58",
                                "grid-md-10": "MuiGrid-grid-md-10-67",
                                "grid-md-11": "MuiGrid-grid-md-11-68",
                                "grid-md-12": "MuiGrid-grid-md-12-69",
                                "grid-md-2": "MuiGrid-grid-md-2-59",
                                "grid-md-3": "MuiGrid-grid-md-3-60",
                                "grid-md-4": "MuiGrid-grid-md-4-61",
                                "grid-md-5": "MuiGrid-grid-md-5-62",
                                "grid-md-6": "MuiGrid-grid-md-6-63",
                                "grid-md-7": "MuiGrid-grid-md-7-64",
                                "grid-md-8": "MuiGrid-grid-md-8-65",
                                "grid-md-9": "MuiGrid-grid-md-9-66",
                                "grid-md-auto": "MuiGrid-grid-md-auto-56",
                                "grid-md-true": "MuiGrid-grid-md-true-57",
                                "grid-sm-1": "MuiGrid-grid-sm-1-44",
                                "grid-sm-10": "MuiGrid-grid-sm-10-53",
                                "grid-sm-11": "MuiGrid-grid-sm-11-54",
                                "grid-sm-12": "MuiGrid-grid-sm-12-55",
                                "grid-sm-2": "MuiGrid-grid-sm-2-45",
                                "grid-sm-3": "MuiGrid-grid-sm-3-46",
                                "grid-sm-4": "MuiGrid-grid-sm-4-47",
                                "grid-sm-5": "MuiGrid-grid-sm-5-48",
                                "grid-sm-6": "MuiGrid-grid-sm-6-49",
                                "grid-sm-7": "MuiGrid-grid-sm-7-50",
                                "grid-sm-8": "MuiGrid-grid-sm-8-51",
                                "grid-sm-9": "MuiGrid-grid-sm-9-52",
                                "grid-sm-auto": "MuiGrid-grid-sm-auto-42",
                                "grid-sm-true": "MuiGrid-grid-sm-true-43",
                                "grid-xl-1": "MuiGrid-grid-xl-1-86",
                                "grid-xl-10": "MuiGrid-grid-xl-10-95",
                                "grid-xl-11": "MuiGrid-grid-xl-11-96",
                                "grid-xl-12": "MuiGrid-grid-xl-12-97",
                                "grid-xl-2": "MuiGrid-grid-xl-2-87",
                                "grid-xl-3": "MuiGrid-grid-xl-3-88",
                                "grid-xl-4": "MuiGrid-grid-xl-4-89",
                                "grid-xl-5": "MuiGrid-grid-xl-5-90",
                                "grid-xl-6": "MuiGrid-grid-xl-6-91",
                                "grid-xl-7": "MuiGrid-grid-xl-7-92",
                                "grid-xl-8": "MuiGrid-grid-xl-8-93",
                                "grid-xl-9": "MuiGrid-grid-xl-9-94",
                                "grid-xl-auto": "MuiGrid-grid-xl-auto-84",
                                "grid-xl-true": "MuiGrid-grid-xl-true-85",
                                "grid-xs-1": "MuiGrid-grid-xs-1-30",
                                "grid-xs-10": "MuiGrid-grid-xs-10-39",
                                "grid-xs-11": "MuiGrid-grid-xs-11-40",
                                "grid-xs-12": "MuiGrid-grid-xs-12-41",
                                "grid-xs-2": "MuiGrid-grid-xs-2-31",
                                "grid-xs-3": "MuiGrid-grid-xs-3-32",
                                "grid-xs-4": "MuiGrid-grid-xs-4-33",
                                "grid-xs-5": "MuiGrid-grid-xs-5-34",
                                "grid-xs-6": "MuiGrid-grid-xs-6-35",
                                "grid-xs-7": "MuiGrid-grid-xs-7-36",
                                "grid-xs-8": "MuiGrid-grid-xs-8-37",
                                "grid-xs-9": "MuiGrid-grid-xs-9-38",
                                "grid-xs-auto": "MuiGrid-grid-xs-auto-28",
                                "grid-xs-true": "MuiGrid-grid-xs-true-29",
                                "item": "MuiGrid-item-2",
                                "justify-xs-center": "MuiGrid-justify-xs-center-18",
                                "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end-19",
                                "justify-xs-space-around": "MuiGrid-justify-xs-space-around-21",
                                "justify-xs-space-between": "MuiGrid-justify-xs-space-between-20",
                                "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly-22",
                                "spacing-xs-16": "MuiGrid-spacing-xs-16-24",
                                "spacing-xs-24": "MuiGrid-spacing-xs-24-25",
                                "spacing-xs-32": "MuiGrid-spacing-xs-32-26",
                                "spacing-xs-40": "MuiGrid-spacing-xs-40-27",
                                "spacing-xs-8": "MuiGrid-spacing-xs-8-23",
                                "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap-7",
                                "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse-8",
                                "zeroMinWidth": "MuiGrid-zeroMinWidth-3",
                              }
                            }
                            component="div"
                            container={false}
                            direction="row"
                            item={true}
                            justify="flex-start"
                            lg={false}
                            md={false}
                            sm={false}
                            spacing={0}
                            style={
                              Object {
                                "marginBottom": 8,
                              }
                            }
                            wrap="wrap"
                            xl={false}
                            xs={12}
                            zeroMinWidth={false}
                          >
                            <div
                              className="MuiGrid-item-2 MuiGrid-grid-xs-12-41"
                              style={
                                Object {
                                  "marginBottom": 8,
                                }
                              }
                            >
                              <WithStyles(Button)
                                color="primary"
                                disabled={true}
                                fullWidth={true}
                                id="submit-author"
                                onClick={[Function]}
                                variant="contained"
                              >
                                <Button
                                  classes={
                                    Object {
                                      "colorInherit": "MuiButton-colorInherit-187",
                                      "contained": "MuiButton-contained-177",
                                      "containedPrimary": "MuiButton-containedPrimary-178",
                                      "containedSecondary": "MuiButton-containedSecondary-179",
                                      "disabled": "MuiButton-disabled-186",
                                      "extendedFab": "MuiButton-extendedFab-184",
                                      "fab": "MuiButton-fab-183",
                                      "flat": "MuiButton-flat-171",
                                      "flatPrimary": "MuiButton-flatPrimary-172",
                                      "flatSecondary": "MuiButton-flatSecondary-173",
                                      "focusVisible": "MuiButton-focusVisible-185",
                                      "fullWidth": "MuiButton-fullWidth-191",
                                      "label": "MuiButton-label-167",
                                      "mini": "MuiButton-mini-188",
                                      "outlined": "MuiButton-outlined-174",
                                      "outlinedPrimary": "MuiButton-outlinedPrimary-175",
                                      "outlinedSecondary": "MuiButton-outlinedSecondary-176",
                                      "raised": "MuiButton-raised-180",
                                      "raisedPrimary": "MuiButton-raisedPrimary-181",
                                      "raisedSecondary": "MuiButton-raisedSecondary-182",
                                      "root": "MuiButton-root-166",
                                      "sizeLarge": "MuiButton-sizeLarge-190",
                                      "sizeSmall": "MuiButton-sizeSmall-189",
                                      "text": "MuiButton-text-168",
                                      "textPrimary": "MuiButton-textPrimary-169",
                                      "textSecondary": "MuiButton-textSecondary-170",
                                    }
                                  }
                                  color="primary"
                                  component="button"
                                  disableFocusRipple={false}
                                  disabled={true}
                                  fullWidth={true}
                                  id="submit-author"
                                  mini={false}
                                  onClick={[Function]}
                                  size="medium"
                                  type="button"
                                  variant="contained"
                                >
                                  <WithStyles(ButtonBase)
                                    className="MuiButton-root-166 MuiButton-contained-177 MuiButton-containedPrimary-178 MuiButton-raised-180 MuiButton-raisedPrimary-181 MuiButton-disabled-186 MuiButton-fullWidth-191"
                                    component="button"
                                    disabled={true}
                                    focusRipple={true}
                                    focusVisibleClassName="MuiButton-focusVisible-185"
                                    id="submit-author"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <ButtonBase
                                      centerRipple={false}
                                      className="MuiButton-root-166 MuiButton-contained-177 MuiButton-containedPrimary-178 MuiButton-raised-180 MuiButton-raisedPrimary-181 MuiButton-disabled-186 MuiButton-fullWidth-191"
                                      classes={
                                        Object {
                                          "disabled": "MuiButtonBase-disabled-193",
                                          "focusVisible": "MuiButtonBase-focusVisible-194",
                                          "root": "MuiButtonBase-root-192",
                                        }
                                      }
                                      component="button"
                                      disableRipple={false}
                                      disableTouchRipple={false}
                                      disabled={true}
                                      focusRipple={true}
                                      focusVisibleClassName="MuiButton-focusVisible-185"
                                      id="submit-author"
                                      onClick={[Function]}
                                      tabIndex="0"
                                      type="button"
                                    >
                                      <button
                                        className="MuiButtonBase-root-192 MuiButtonBase-disabled-193 MuiButton-root-166 MuiButton-contained-177 MuiButton-containedPrimary-178 MuiButton-raised-180 MuiButton-raisedPrimary-181 MuiButton-disabled-186 MuiButton-fullWidth-191"
                                        disabled={true}
                                        id="submit-author"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        onMouseDown={[Function]}
                                        onMouseLeave={[Function]}
                                        onMouseUp={[Function]}
                                        onTouchEnd={[Function]}
                                        onTouchMove={[Function]}
                                        onTouchStart={[Function]}
                                        tabIndex="-1"
                                        type="button"
                                      >
                                        <span
                                          className="MuiButton-label-167"
                                        >
                                          Add author
                                        </span>
                                      </button>
                                    </ButtonBase>
                                  </WithStyles(ButtonBase)>
                                </Button>
                              </WithStyles(Button)>
                            </div>
                          </Grid>
                        </WithStyles(Grid)>
                      </div>
                    </Grid>
                  </WithStyles(Grid)>
                </ContributorForm>
              </Connect(ContributorForm)>
            </div>
          </ContributorsEditor>
        </MuiPickersUtilsProvider>
      </MuiThemeProvider>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`ContributorsEditor renders full component with a defined className 1`] = `
<div>
  <Connect(ContributorForm)
    author={
      Object {
        "aut_id": 1,
      }
    }
    className="requiredField"
    classes={
      Object {
        "list": "list",
        "scroll": "scroll",
      }
    }
    editMode={false}
    hideDelete={false}
    hideReorder={false}
    isContributorAssigned={false}
    isNtro={false}
    onSubmit={[Function]}
    showContributorAssignment={false}
    showIdentifierLookup={false}
    showRoleInput={false}
  />
</div>
`;

exports[`ContributorsEditor renders full component with identifier lookup 1`] = `
<div>
  <Connect(ContributorForm)
    author={
      Object {
        "aut_id": 1,
      }
    }
    classes={
      Object {
        "list": "list",
        "scroll": "scroll",
      }
    }
    editMode={false}
    hideDelete={false}
    hideReorder={false}
    isContributorAssigned={false}
    isNtro={false}
    onSubmit={[Function]}
    showContributorAssignment={false}
    showIdentifierLookup={true}
    showRoleInput={false}
  />
</div>
`;

exports[`ContributorsEditor renders full component with role input 1`] = `
<div>
  <Connect(ContributorForm)
    author={
      Object {
        "aut_id": 1,
      }
    }
    classes={
      Object {
        "list": "list",
        "scroll": "scroll",
      }
    }
    editMode={false}
    hideDelete={false}
    hideReorder={false}
    isContributorAssigned={false}
    isNtro={false}
    onSubmit={[Function]}
    showContributorAssignment={false}
    showIdentifierLookup={false}
    showRoleInput={true}
  />
</div>
`;

exports[`ContributorsEditor renders no contributor rows with no infinite scroll 1`] = `
<div>
  <Connect(ContributorForm)
    author={
      Object {
        "aut_id": 1,
      }
    }
    classes={
      Object {
        "list": "list",
        "scroll": "scroll",
      }
    }
    contributors={Array []}
    editMode={false}
    hideDelete={false}
    hideReorder={false}
    isContributorAssigned={false}
    isNtro={false}
    onSubmit={[Function]}
    showContributorAssignment={false}
    showIdentifierLookup={false}
    showRoleInput={false}
  />
</div>
`;

exports[`ContributorsEditor returns contributor form with expected props 1`] = `
<Connect(ContributorForm)
  author={
    Object {
      "aut_id": 1,
    }
  }
  classes={
    Object {
      "list": "list",
      "scroll": "scroll",
    }
  }
  contributors={
    Array [
      Object {
        "nameAsPublished": 1,
      },
    ]
  }
  editMode={false}
  hideDelete={false}
  hideReorder={false}
  isContributorAssigned={false}
  isNtro={false}
  onSubmit={[Function]}
  showContributorAssignment={false}
  showIdentifierLookup={false}
  showRoleInput={false}
/>
`;

exports[`ContributorsEditor returns contributor form with expected props 2`] = `
<Connect(ContributorForm)
  author={
    Object {
      "aut_id": 1,
    }
  }
  classes={
    Object {
      "list": "list",
      "scroll": "scroll",
    }
  }
  contributors={
    Array [
      Object {
        "nameAsPublished": 1,
      },
    ]
  }
  disableNameAsPublished={true}
  editMode={true}
  enableUqIdentifierOnAffiliationChange={false}
  hideDelete={false}
  hideReorder={false}
  isContributorAssigned={false}
  isNtro={false}
  locale={
    Object {
      "addButton": "test",
    }
  }
  meta={
    Object {
      "initial": Object {
        "toJS": [Function],
      },
    }
  }
  onSubmit={[Function]}
  showContributorAssignment={false}
  showIdentifierLookup={false}
  showRoleInput={false}
/>
`;

exports[`ContributorsEditor should get contributors from props and input value set as an Immutable list 1`] = `
<div>
  <Connect(ContributorForm)
    author={
      Object {
        "aut_id": 1,
      }
    }
    classes={
      Object {
        "list": "list",
        "scroll": "scroll",
      }
    }
    editMode={false}
    hideDelete={false}
    hideReorder={false}
    input={
      Object {
        "name": "test",
        "value": Immutable.List [
          Object {
            "displayName": "test 1",
          },
          Object {
            "displayName": "test 2",
          },
        ],
      }
    }
    isContributorAssigned={true}
    isNtro={false}
    onSubmit={[Function]}
    showContributorAssignment={false}
    showIdentifierLookup={false}
    showRoleInput={false}
  />
  <WithStyles(Grid)
    container={true}
    spacing={8}
  >
    <WithStyles(Grid)
      item={true}
      xs={12}
    >
      <WithStyles(List)
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <WithStyles(ContributorRowHeader)
          hideDelete={false}
          isInfinite={false}
          isNtro={false}
          onDeleteAll={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(List)>
      <WithStyles(List)
        classes={
          Object {
            "root": "list ",
          }
        }
      >
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={true}
          canMoveUp={false}
          contributor={
            Object {
              "displayName": "test 1",
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={0}
          key="ContributorRow_0"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={false}
          canMoveUp={true}
          contributor={
            Object {
              "displayName": "test 2",
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={1}
          key="ContributorRow_1"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
      </WithStyles(List)>
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</div>
`;

exports[`ContributorsEditor should get contributors from props and input value set as an array 1`] = `
<div>
  <Connect(ContributorForm)
    author={
      Object {
        "aut_id": 1,
      }
    }
    classes={
      Object {
        "list": "list",
        "scroll": "scroll",
      }
    }
    editMode={false}
    hideDelete={false}
    hideReorder={false}
    input={
      Object {
        "name": "test",
        "value": Array [
          Object {
            "displayName": "test 1",
          },
          Object {
            "displayName": "test 2",
          },
        ],
      }
    }
    isContributorAssigned={true}
    isNtro={false}
    onSubmit={[Function]}
    showContributorAssignment={false}
    showIdentifierLookup={false}
    showRoleInput={false}
  />
  <WithStyles(Grid)
    container={true}
    spacing={8}
  >
    <WithStyles(Grid)
      item={true}
      xs={12}
    >
      <WithStyles(List)
        style={
          Object {
            "marginBottom": 0,
          }
        }
      >
        <WithStyles(ContributorRowHeader)
          hideDelete={false}
          isInfinite={false}
          isNtro={false}
          onDeleteAll={[Function]}
          showContributorAssignment={false}
          showIdentifierLookup={false}
          showRoleInput={false}
        />
      </WithStyles(List)>
      <WithStyles(List)
        classes={
          Object {
            "root": "list ",
          }
        }
      >
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={true}
          canMoveUp={false}
          contributor={
            Object {
              "displayName": "test 1",
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={0}
          key="ContributorRow_0"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
        <WithStyles(WithTheme(WithWidth(ContributorRow)))
          canMoveDown={false}
          canMoveUp={true}
          contributor={
            Object {
              "displayName": "test 2",
            }
          }
          hideDelete={false}
          hideReorder={false}
          index={1}
          key="ContributorRow_1"
          onDelete={[Function]}
          onMoveDown={[Function]}
          onMoveUp={[Function]}
          onSelect={[Function]}
          showContributorAssignment={false}
        />
      </WithStyles(List)>
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</div>
`;

exports[`ContributorsEditor should have a proper style generator 1`] = `
Object {
  "list": Object {
    "margin": "0",
    "marginBottom": 16,
    "maxHeight": 225,
    "overflow": "hidden",
    "width": "100%",
  },
  "scroll": Object {
    "overflowY": "scroll",
  },
}
`;

exports[`ContributorsEditor should not move contributor down 1`] = `
<div>
  <Connect(ContributorForm)
    author={
      Object {
        "aut_id": 1,
      }
    }
    classes={
      Object {
        "list": "list",
        "scroll": "scroll",
      }
    }
    editMode={false}
    hideDelete={false}
    hideReorder={false}
    isContributorAssigned={false}
    isNtro={false}
    onSubmit={[Function]}
    showContributorAssignment={false}
    showIdentifierLookup={false}
    showRoleInput={false}
  />
</div>
`;

exports[`ContributorsEditor should render error as html 1`] = `
<div>
  <Connect(ContributorForm)
    author={
      Object {
        "aut_id": 1,
      }
    }
    classes={
      Object {
        "list": "list",
        "scroll": "scroll",
      }
    }
    editMode={false}
    hideDelete={false}
    hideReorder={false}
    isContributorAssigned={false}
    isNtro={false}
    meta={
      Object {
        "error": <p>
          <span>
            test
          </span>
        </p>,
      }
    }
    onSubmit={[Function]}
    showContributorAssignment={false}
    showIdentifierLookup={false}
    showRoleInput={false}
  />
  <WithStyles(Typography)
    color="error"
    variant="caption"
  >
    <span
      key="0/.0"
    >
      test
    </span>
  </WithStyles(Typography)>
</div>
`;

exports[`ContributorsEditor should render error as one child 1`] = `
<div>
  <Connect(ContributorForm)
    author={
      Object {
        "aut_id": 1,
      }
    }
    classes={
      Object {
        "list": "list",
        "scroll": "scroll",
      }
    }
    editMode={false}
    hideDelete={false}
    hideReorder={false}
    isContributorAssigned={false}
    isNtro={false}
    meta={
      Object {
        "error": <span>
          test
        </span>,
      }
    }
    onSubmit={[Function]}
    showContributorAssignment={false}
    showIdentifierLookup={false}
    showRoleInput={false}
  />
  <WithStyles(Typography)
    color="error"
    variant="caption"
  >
    test
  </WithStyles(Typography)>
</div>
`;

exports[`ContributorsEditor should show validation error 1`] = `
<div>
  <Connect(ContributorForm)
    author={
      Object {
        "aut_id": 1,
      }
    }
    classes={
      Object {
        "list": "list",
        "scroll": "scroll",
      }
    }
    contributors={Array []}
    editMode={false}
    hideDelete={false}
    hideReorder={false}
    isContributorAssigned={false}
    isNtro={false}
    meta={
      Object {
        "error": "This is a test error",
      }
    }
    onSubmit={[Function]}
    showContributorAssignment={false}
    showIdentifierLookup={false}
    showRoleInput={false}
  />
  <WithStyles(Typography)
    color="error"
    variant="caption"
  >
    This is a test error
  </WithStyles(Typography)>
</div>
`;
