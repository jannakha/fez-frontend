// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component ContributorForm should display org affiliation selector if affiliation is NotUQ 1`] = `
<Fragment>
  <WithStyles(Grid)
    container={true}
    spacing={8}
    style={
      Object {
        "marginTop": 8,
      }
    }
  >
    <WithStyles(Grid)
      item={true}
      sm={true}
      xs={12}
    >
      <WithStyles(TextFieldWrapper)
        autoComplete="off"
        disabled={false}
        error={false}
        fullWidth={true}
        id="nameAsPublishedField"
        onChange={[Function]}
        onKeyDown={[Function]}
        required={false}
        value=""
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      style={
        Object {
          "marginBottom": 8,
        }
      }
      xs={12}
    >
      <WithStyles(Button)
        color="primary"
        disabled={true}
        fullWidth={true}
        id="submit-author"
        onClick={[Function]}
        variant="contained"
      />
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</Fragment>
`;

exports[`Component ContributorForm should display org affiliation selector if affiliation is NotUQ 2`] = `
<Fragment>
  <WithStyles(Grid)
    container={true}
    spacing={8}
    style={
      Object {
        "marginTop": 8,
      }
    }
  >
    <WithStyles(Grid)
      item={true}
      sm={true}
      xs={12}
    >
      <WithStyles(TextFieldWrapper)
        autoComplete="off"
        disabled={false}
        error={false}
        fullWidth={true}
        id="nameAsPublishedField"
        onChange={[Function]}
        onKeyDown={[Function]}
        required={false}
        value=""
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      xs={12}
    >
      <NonUqOrgAffiliationFormSection
        disableAffiliationEdit={false}
        disableOrgTypeEdit={false}
        locale={
          Object {
            "fields": Object {
              "organisation": Object {
                "inputLabel": "Organisation",
                "placeholder": "Enter the primary affiliated organisation",
              },
              "organisationType": Object {
                "inputLabel": "Organisation type",
                "placeholder": "Select an affiliated organisation type",
              },
            },
          }
        }
        onOrgAffiliationChange={[Function]}
        onOrgTypeChange={[Function]}
        orgAffiliation=""
        orgType=""
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      style={
        Object {
          "marginBottom": 8,
        }
      }
      xs={12}
    >
      <WithStyles(Button)
        color="primary"
        disabled={true}
        fullWidth={true}
        id="submit-author"
        onClick={[Function]}
        variant="contained"
      />
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</Fragment>
`;

exports[`Component ContributorForm should handle affiliation change 1`] = `
<Fragment>
  <WithStyles(Grid)
    container={true}
    spacing={8}
    style={
      Object {
        "marginTop": 8,
      }
    }
  >
    <WithStyles(Grid)
      item={true}
      sm={2}
      xs={12}
    >
      <OrgAffilicationTypeSelector
        affiliation=""
        disabled={false}
        error={false}
        locale={
          Object {
            "inputLabel": "Org affiliation",
            "options": Array [
              Object {
                "key": "UQ",
                "value": "UQ",
              },
              Object {
                "key": "NotUQ",
                "value": "Not UQ",
              },
            ],
            "placeholder": "Organisational affiliation at time of publication",
          }
        }
        onAffiliationChange={[Function]}
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      sm={true}
      xs={12}
    >
      <WithStyles(TextFieldWrapper)
        autoComplete="off"
        disabled={true}
        error={false}
        fullWidth={true}
        id="nameAsPublishedField"
        onChange={[Function]}
        onKeyDown={[Function]}
        required={false}
        value=""
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      style={
        Object {
          "marginBottom": 8,
        }
      }
      xs={12}
    >
      <WithStyles(Button)
        color="primary"
        disabled={true}
        fullWidth={true}
        id="submit-author"
        onClick={[Function]}
        variant="contained"
      />
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</Fragment>
`;

exports[`Component ContributorForm should process prop updates 1`] = `
<Fragment>
  <WithStyles(Grid)
    container={true}
    spacing={8}
    style={
      Object {
        "marginTop": 8,
      }
    }
  >
    <WithStyles(Grid)
      item={true}
      sm={true}
      xs={12}
    >
      <WithStyles(TextFieldWrapper)
        autoComplete="off"
        disabled={false}
        error={false}
        fullWidth={true}
        id="nameAsPublishedField"
        onChange={[Function]}
        onKeyDown={[Function]}
        required={false}
        value="value1"
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      style={
        Object {
          "marginBottom": 8,
        }
      }
      xs={12}
    >
      <WithStyles(Button)
        color="primary"
        disabled={false}
        fullWidth={true}
        id="submit-author"
        onClick={[Function]}
        variant="contained"
      />
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</Fragment>
`;

exports[`Component ContributorForm should process prop updates 2`] = `
<Fragment>
  <WithStyles(Grid)
    container={true}
    spacing={8}
    style={
      Object {
        "marginTop": 8,
      }
    }
  >
    <WithStyles(Grid)
      item={true}
      sm={true}
      xs={12}
    >
      <WithStyles(TextFieldWrapper)
        autoComplete="off"
        disabled={false}
        error={false}
        fullWidth={true}
        id="nameAsPublishedField"
        onChange={[Function]}
        onKeyDown={[Function]}
        required={false}
        value="value2"
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      style={
        Object {
          "marginBottom": 8,
        }
      }
      xs={12}
    >
      <WithStyles(Button)
        color="primary"
        disabled={false}
        fullWidth={true}
        id="submit-author"
        onClick={[Function]}
        variant="contained"
      />
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</Fragment>
`;

exports[`Component ContributorForm should render NTRO fields 1`] = `
<Fragment>
  <WithStyles(Grid)
    container={true}
    spacing={8}
    style={
      Object {
        "marginTop": 8,
      }
    }
  >
    <WithStyles(Grid)
      item={true}
      sm={2}
      xs={12}
    >
      <OrgAffilicationTypeSelector
        affiliation=""
        disabled={false}
        error={false}
        locale={
          Object {
            "inputLabel": "Org affiliation",
            "options": Array [
              Object {
                "key": "UQ",
                "value": "UQ",
              },
              Object {
                "key": "NotUQ",
                "value": "Not UQ",
              },
            ],
            "placeholder": "Organisational affiliation at time of publication",
          }
        }
        onAffiliationChange={[Function]}
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      sm={true}
      xs={12}
    >
      <WithStyles(TextFieldWrapper)
        autoComplete="off"
        disabled={true}
        error={false}
        fullWidth={true}
        id="nameAsPublishedField"
        onChange={[Function]}
        onKeyDown={[Function]}
        required={false}
        value=""
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      style={
        Object {
          "marginBottom": 8,
        }
      }
      xs={12}
    >
      <WithStyles(Button)
        color="primary"
        disabled={true}
        fullWidth={true}
        id="submit-author"
        onClick={[Function]}
        variant="contained"
      />
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</Fragment>
`;

exports[`Component ContributorForm should render connected component 1`] = `
<Provider
  store={
    Object {
      "dispatch": [MockFunction],
      "getState": [MockFunction] {
        "calls": Array [
          Array [],
          Array [],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
          Object {
            "type": "return",
            "value": Immutable.Map {},
          },
        ],
      },
      "subscribe": [MockFunction] {
        "calls": Array [
          Array [
            [Function],
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      },
    }
  }
>
  <MemoryRouter
    initialEntries={
      Array [
        Object {
          "key": "testKey",
          "pathname": "/",
        },
      ]
    }
  >
    <Router
      history={
        Object {
          "action": "POP",
          "block": [Function],
          "canGo": [Function],
          "createHref": [Function],
          "entries": Array [
            Object {
              "hash": "",
              "key": "testKey",
              "pathname": "/",
              "search": "",
            },
          ],
          "go": [Function],
          "goBack": [Function],
          "goForward": [Function],
          "index": 0,
          "length": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "testKey",
            "pathname": "/",
            "search": "",
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <MuiThemeProvider
        theme={
          Object {
            "breakpoints": Object {
              "between": [Function],
              "down": [Function],
              "keys": Array [
                "xs",
                "sm",
                "md",
                "lg",
                "xl",
              ],
              "only": [Function],
              "up": [Function],
              "values": Object {
                "lg": 1280,
                "md": 960,
                "sm": 600,
                "xl": 1920,
                "xs": 0,
              },
              "width": [Function],
            },
            "direction": "ltr",
            "graphs": Object {
              "color1": "#d72865",
              "color2": "#1e7d94",
              "color3": "#49075E",
              "color4": "#468fcc",
              "color5": "#f28620",
              "color6": "#333333",
              "color7": "#595959",
            },
            "hexToRGBA": [Function],
            "mixins": Object {
              "gutters": [Function],
              "toolbar": Object {
                "@media (min-width:0px) and (orientation: landscape)": Object {
                  "minHeight": 48,
                },
                "@media (min-width:600px)": Object {
                  "minHeight": 64,
                },
                "minHeight": 56,
              },
            },
            "overrides": Object {
              "MuiFormLabel": Object {
                "root": Object {
                  "overflow": "hidden",
                  "textOverflow": "ellipsis",
                  "whiteSpace": "nowrap",
                  "width": "100%",
                },
              },
            },
            "palette": Object {
              "accent": Object {
                "dark": "#2a557d",
                "light": "#54acff",
                "main": "#4085C6",
              },
              "action": Object {
                "active": "rgba(0, 0, 0, 0.54)",
                "disabled": "rgba(0, 0, 0, 0.26)",
                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                "hover": "rgba(0, 0, 0, 0.08)",
                "hoverOpacity": 0.08,
                "selected": "rgba(0, 0, 0, 0.14)",
              },
              "augmentColor": [Function],
              "background": Object {
                "default": "#fafafa",
                "paper": "#fff",
              },
              "common": Object {
                "black": "#000",
                "white": "#fff",
              },
              "contrastThreshold": 3,
              "divider": "rgba(0, 0, 0, 0.12)",
              "error": Object {
                "contrastText": "#fff",
                "dark": "#790000",
                "light": "#ff0000",
                "main": "#c80000",
              },
              "getContrastText": [Function],
              "grey": Object {
                "100": "#f5f5f5",
                "200": "#eeeeee",
                "300": "#e0e0e0",
                "400": "#bdbdbd",
                "50": "#fafafa",
                "500": "#9e9e9e",
                "600": "#757575",
                "700": "#616161",
                "800": "#424242",
                "900": "#212121",
                "A100": "#d5d5d5",
                "A200": "#aaaaaa",
                "A400": "#303030",
                "A700": "#616161",
              },
              "primary": Object {
                "contrastText": "#fff",
                "dark": "#3b1a59",
                "gradient": Object {
                  "diagonal": Object {
                    "background": "linear-gradient(135deg, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                  "horizontal": Object {
                    "background": "linear-gradient(to right, rgb(81,36,122) 55%,rgb(150,42,139) 100%)",
                    "filter": "progid:DXImageTransform.Microsoft.gradient( startColorstr=\\"#51247a\\", endColorstr=\\"#962a8b\\",GradientType=1 )",
                  },
                },
                "light": "#962A8B",
                "main": "#51247A",
              },
              "secondary": Object {
                "contrastText": "#fff",
                "dark": "#333333",
                "light": "#f2f2f2",
                "main": "#595959",
              },
              "success": Object {
                "dark": "#005000",
                "light": "#00a700",
                "main": "#007200",
              },
              "text": Object {
                "disabled": "rgba(0, 0, 0, 0.38)",
                "hint": "rgba(0, 0, 0, 0.38)",
                "primary": "rgba(0, 0, 0, 0.87)",
                "secondary": "rgba(0, 0, 0, 0.54)",
              },
              "tonalOffset": 0.2,
              "type": "light",
              "warning": Object {
                "dark": "#542400",
                "light": "#ff9a57",
                "main": "#bf5000",
              },
              "white": Object {
                "main": "#FFFFFF",
              },
            },
            "props": Object {},
            "shadows": Array [
              "none",
              "0px 1px 3px 0px rgba(0, 0, 0, 0.2),0px 1px 1px 0px rgba(0, 0, 0, 0.14),0px 2px 1px -1px rgba(0, 0, 0, 0.12)",
              "0px 1px 5px 0px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0, 0, 0, 0.14),0px 3px 1px -2px rgba(0, 0, 0, 0.12)",
              "0px 1px 8px 0px rgba(0, 0, 0, 0.2),0px 3px 4px 0px rgba(0, 0, 0, 0.14),0px 3px 3px -2px rgba(0, 0, 0, 0.12)",
              "0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0, 0, 0, 0.12)",
              "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 5px 8px 0px rgba(0, 0, 0, 0.14),0px 1px 14px 0px rgba(0, 0, 0, 0.12)",
              "0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 6px 10px 0px rgba(0, 0, 0, 0.14),0px 1px 18px 0px rgba(0, 0, 0, 0.12)",
              "0px 4px 5px -2px rgba(0, 0, 0, 0.2),0px 7px 10px 1px rgba(0, 0, 0, 0.14),0px 2px 16px 1px rgba(0, 0, 0, 0.12)",
              "0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0, 0, 0, 0.12)",
              "0px 5px 6px -3px rgba(0, 0, 0, 0.2),0px 9px 12px 1px rgba(0, 0, 0, 0.14),0px 3px 16px 2px rgba(0, 0, 0, 0.12)",
              "0px 6px 6px -3px rgba(0, 0, 0, 0.2),0px 10px 14px 1px rgba(0, 0, 0, 0.14),0px 4px 18px 3px rgba(0, 0, 0, 0.12)",
              "0px 6px 7px -4px rgba(0, 0, 0, 0.2),0px 11px 15px 1px rgba(0, 0, 0, 0.14),0px 4px 20px 3px rgba(0, 0, 0, 0.12)",
              "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 12px 17px 2px rgba(0, 0, 0, 0.14),0px 5px 22px 4px rgba(0, 0, 0, 0.12)",
              "0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 13px 19px 2px rgba(0, 0, 0, 0.14),0px 5px 24px 4px rgba(0, 0, 0, 0.12)",
              "0px 7px 9px -4px rgba(0, 0, 0, 0.2),0px 14px 21px 2px rgba(0, 0, 0, 0.14),0px 5px 26px 4px rgba(0, 0, 0, 0.12)",
              "0px 8px 9px -5px rgba(0, 0, 0, 0.2),0px 15px 22px 2px rgba(0, 0, 0, 0.14),0px 6px 28px 5px rgba(0, 0, 0, 0.12)",
              "0px 8px 10px -5px rgba(0, 0, 0, 0.2),0px 16px 24px 2px rgba(0, 0, 0, 0.14),0px 6px 30px 5px rgba(0, 0, 0, 0.12)",
              "0px 8px 11px -5px rgba(0, 0, 0, 0.2),0px 17px 26px 2px rgba(0, 0, 0, 0.14),0px 6px 32px 5px rgba(0, 0, 0, 0.12)",
              "0px 9px 11px -5px rgba(0, 0, 0, 0.2),0px 18px 28px 2px rgba(0, 0, 0, 0.14),0px 7px 34px 6px rgba(0, 0, 0, 0.12)",
              "0px 9px 12px -6px rgba(0, 0, 0, 0.2),0px 19px 29px 2px rgba(0, 0, 0, 0.14),0px 7px 36px 6px rgba(0, 0, 0, 0.12)",
              "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 20px 31px 3px rgba(0, 0, 0, 0.14),0px 8px 38px 7px rgba(0, 0, 0, 0.12)",
              "0px 10px 13px -6px rgba(0, 0, 0, 0.2),0px 21px 33px 3px rgba(0, 0, 0, 0.14),0px 8px 40px 7px rgba(0, 0, 0, 0.12)",
              "0px 10px 14px -6px rgba(0, 0, 0, 0.2),0px 22px 35px 3px rgba(0, 0, 0, 0.14),0px 8px 42px 7px rgba(0, 0, 0, 0.12)",
              "0px 11px 14px -7px rgba(0, 0, 0, 0.2),0px 23px 36px 3px rgba(0, 0, 0, 0.14),0px 9px 44px 8px rgba(0, 0, 0, 0.12)",
              "0px 11px 15px -7px rgba(0, 0, 0, 0.2),0px 24px 38px 3px rgba(0, 0, 0, 0.14),0px 9px 46px 8px rgba(0, 0, 0, 0.12)",
            ],
            "shape": Object {
              "borderRadius": 4,
            },
            "spacing": Object {
              "unit": 8,
            },
            "status": Object {
              "danger": "#f44336",
              "warning": "#ff9800",
            },
            "transitions": Object {
              "create": [Function],
              "duration": Object {
                "complex": 375,
                "enteringScreen": 225,
                "leavingScreen": 195,
                "short": 250,
                "shorter": 200,
                "shortest": 150,
                "standard": 300,
              },
              "easing": Object {
                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
              },
              "getAutoHeightDuration": [Function],
            },
            "typography": Object {
              "body1": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.5,
              },
              "body1Next": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.5,
              },
              "body2": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 300,
                "letterSpacing": "0.01071em",
                "lineHeight": 1.5,
              },
              "body2Next": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 300,
                "letterSpacing": "0.01071em",
                "lineHeight": 1.5,
              },
              "button": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.02857em",
                "lineHeight": 1.5,
                "textTransform": "uppercase",
              },
              "buttonNext": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.02857em",
                "lineHeight": 1.5,
                "textTransform": "uppercase",
              },
              "caption": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.03333em",
                "lineHeight": 1.66,
              },
              "captionNext": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.03333em",
                "lineHeight": 1.66,
              },
              "display1": Object {
                "color": "rgba(0, 0, 0, 0.54)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 300,
                "lineHeight": "1.20588em",
              },
              "display2": Object {
                "color": "rgba(0, 0, 0, 0.54)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.8125rem",
                "fontWeight": 300,
                "lineHeight": "1.13333em",
                "marginLeft": "-.02em",
              },
              "display3": Object {
                "color": "rgba(0, 0, 0, 0.54)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.5rem",
                "fontWeight": 300,
                "letterSpacing": "-.02em",
                "lineHeight": "1.30357em",
                "marginLeft": "-.02em",
              },
              "display4": Object {
                "color": "rgba(0, 0, 0, 0.54)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "7rem",
                "fontWeight": 200,
                "letterSpacing": "-.04em",
                "lineHeight": "1.14286em",
                "marginLeft": "-.04em",
              },
              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
              "fontSize": 14,
              "fontWeightLight": 200,
              "fontWeightMedium": 400,
              "fontWeightRegular": 300,
              "h1": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "6rem",
                "fontWeight": 200,
                "letterSpacing": "-0.01562em",
                "lineHeight": 1,
              },
              "h2": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3.75rem",
                "fontWeight": 200,
                "letterSpacing": "-0.00833em",
                "lineHeight": 1,
              },
              "h3": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "3rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.04,
              },
              "h4": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "2.125rem",
                "fontWeight": 300,
                "letterSpacing": "0.00735em",
                "lineHeight": 1.17,
              },
              "h5": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 300,
                "letterSpacing": "0em",
                "lineHeight": 1.33,
              },
              "h6": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.25rem",
                "fontWeight": 400,
                "letterSpacing": "0.0075em",
                "lineHeight": 1.6,
              },
              "headline": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.5rem",
                "fontWeight": 300,
                "lineHeight": "1.35417em",
              },
              "overline": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.75rem",
                "fontWeight": 300,
                "letterSpacing": "0.08333em",
                "lineHeight": 2.66,
                "textTransform": "uppercase",
              },
              "pxToRem": [Function],
              "round": [Function],
              "subheading": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "lineHeight": "1.5em",
              },
              "subtitle1": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1rem",
                "fontWeight": 300,
                "letterSpacing": "0.00938em",
                "lineHeight": 1.75,
              },
              "subtitle2": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "0.875rem",
                "fontWeight": 400,
                "letterSpacing": "0.00714em",
                "lineHeight": 1.57,
              },
              "suppressDeprecationWarnings": true,
              "title": Object {
                "color": "rgba(0, 0, 0, 0.87)",
                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                "fontSize": "1.3125rem",
                "fontWeight": 400,
                "lineHeight": "1.16667em",
              },
              "useNextVariants": true,
            },
            "zIndex": Object {
              "appBar": 1100,
              "drawer": 1200,
              "mobileStepper": 1000,
              "modal": 1300,
              "snackbar": 1400,
              "tooltip": 1500,
            },
          }
        }
      >
        <MuiPickersUtilsProvider
          utils={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "locale": undefined,
                    "moment": undefined,
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
        >
          <Connect(ContributorForm)
            onSubmit={[MockFunction]}
          >
            <ContributorForm
              actions={
                Object {
                  "linkAuthorOrcidId": [Function],
                  "resetSavingAuthorState": [Function],
                  "searchAuthors": [Function],
                  "updateCurrentAuthor": [Function],
                }
              }
              authorsList={Array []}
              contributor={Object {}}
              disableNameAsPublished={false}
              enableUqIdentifierOnAffiliationChange={true}
              locale={
                Object {
                  "addButton": "Add author",
                  "creatorRoleHint": "Role of the creator in relation to the dataset",
                  "creatorRoleLabel": "Creator role",
                  "descriptionStep1": <div>
                    <span
                      className="authorSteps"
                    >
                      Step 1 of 2
                    </span>
                    - Please 
                    <b>
                      add to a list of contributors below
                    </b>
                    , in the format and order that they are published.
                  </div>,
                  "descriptionStep1NoStep2": <div>
                    Please 
                    <b>
                      add to a list of contributors below
                    </b>
                    , in the format and order that they are published.
                  </div>,
                  "identifierLabel": "UQ identifier (if available)",
                  "nameAsPublishedHint": "Please type the name exactly as published",
                  "nameAsPublishedLabel": "Name as published",
                }
              }
              onSubmit={[MockFunction]}
              required={false}
              showIdentifierLookup={false}
            >
              <div>
                Please 
                <b>
                  add to a list of contributors below
                </b>
                , in the format and order that they are published.
              </div>
              <WithStyles(Grid)
                container={true}
                spacing={8}
                style={
                  Object {
                    "marginTop": 8,
                  }
                }
              >
                <Grid
                  alignContent="stretch"
                  alignItems="stretch"
                  classes={
                    Object {
                      "align-content-xs-center": "MuiGrid-align-content-xs-center-13",
                      "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end-15",
                      "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start-14",
                      "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around-17",
                      "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between-16",
                      "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline-12",
                      "align-items-xs-center": "MuiGrid-align-items-xs-center-9",
                      "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end-11",
                      "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start-10",
                      "container": "MuiGrid-container-1",
                      "direction-xs-column": "MuiGrid-direction-xs-column-4",
                      "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse-5",
                      "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse-6",
                      "grid-lg-1": "MuiGrid-grid-lg-1-72",
                      "grid-lg-10": "MuiGrid-grid-lg-10-81",
                      "grid-lg-11": "MuiGrid-grid-lg-11-82",
                      "grid-lg-12": "MuiGrid-grid-lg-12-83",
                      "grid-lg-2": "MuiGrid-grid-lg-2-73",
                      "grid-lg-3": "MuiGrid-grid-lg-3-74",
                      "grid-lg-4": "MuiGrid-grid-lg-4-75",
                      "grid-lg-5": "MuiGrid-grid-lg-5-76",
                      "grid-lg-6": "MuiGrid-grid-lg-6-77",
                      "grid-lg-7": "MuiGrid-grid-lg-7-78",
                      "grid-lg-8": "MuiGrid-grid-lg-8-79",
                      "grid-lg-9": "MuiGrid-grid-lg-9-80",
                      "grid-lg-auto": "MuiGrid-grid-lg-auto-70",
                      "grid-lg-true": "MuiGrid-grid-lg-true-71",
                      "grid-md-1": "MuiGrid-grid-md-1-58",
                      "grid-md-10": "MuiGrid-grid-md-10-67",
                      "grid-md-11": "MuiGrid-grid-md-11-68",
                      "grid-md-12": "MuiGrid-grid-md-12-69",
                      "grid-md-2": "MuiGrid-grid-md-2-59",
                      "grid-md-3": "MuiGrid-grid-md-3-60",
                      "grid-md-4": "MuiGrid-grid-md-4-61",
                      "grid-md-5": "MuiGrid-grid-md-5-62",
                      "grid-md-6": "MuiGrid-grid-md-6-63",
                      "grid-md-7": "MuiGrid-grid-md-7-64",
                      "grid-md-8": "MuiGrid-grid-md-8-65",
                      "grid-md-9": "MuiGrid-grid-md-9-66",
                      "grid-md-auto": "MuiGrid-grid-md-auto-56",
                      "grid-md-true": "MuiGrid-grid-md-true-57",
                      "grid-sm-1": "MuiGrid-grid-sm-1-44",
                      "grid-sm-10": "MuiGrid-grid-sm-10-53",
                      "grid-sm-11": "MuiGrid-grid-sm-11-54",
                      "grid-sm-12": "MuiGrid-grid-sm-12-55",
                      "grid-sm-2": "MuiGrid-grid-sm-2-45",
                      "grid-sm-3": "MuiGrid-grid-sm-3-46",
                      "grid-sm-4": "MuiGrid-grid-sm-4-47",
                      "grid-sm-5": "MuiGrid-grid-sm-5-48",
                      "grid-sm-6": "MuiGrid-grid-sm-6-49",
                      "grid-sm-7": "MuiGrid-grid-sm-7-50",
                      "grid-sm-8": "MuiGrid-grid-sm-8-51",
                      "grid-sm-9": "MuiGrid-grid-sm-9-52",
                      "grid-sm-auto": "MuiGrid-grid-sm-auto-42",
                      "grid-sm-true": "MuiGrid-grid-sm-true-43",
                      "grid-xl-1": "MuiGrid-grid-xl-1-86",
                      "grid-xl-10": "MuiGrid-grid-xl-10-95",
                      "grid-xl-11": "MuiGrid-grid-xl-11-96",
                      "grid-xl-12": "MuiGrid-grid-xl-12-97",
                      "grid-xl-2": "MuiGrid-grid-xl-2-87",
                      "grid-xl-3": "MuiGrid-grid-xl-3-88",
                      "grid-xl-4": "MuiGrid-grid-xl-4-89",
                      "grid-xl-5": "MuiGrid-grid-xl-5-90",
                      "grid-xl-6": "MuiGrid-grid-xl-6-91",
                      "grid-xl-7": "MuiGrid-grid-xl-7-92",
                      "grid-xl-8": "MuiGrid-grid-xl-8-93",
                      "grid-xl-9": "MuiGrid-grid-xl-9-94",
                      "grid-xl-auto": "MuiGrid-grid-xl-auto-84",
                      "grid-xl-true": "MuiGrid-grid-xl-true-85",
                      "grid-xs-1": "MuiGrid-grid-xs-1-30",
                      "grid-xs-10": "MuiGrid-grid-xs-10-39",
                      "grid-xs-11": "MuiGrid-grid-xs-11-40",
                      "grid-xs-12": "MuiGrid-grid-xs-12-41",
                      "grid-xs-2": "MuiGrid-grid-xs-2-31",
                      "grid-xs-3": "MuiGrid-grid-xs-3-32",
                      "grid-xs-4": "MuiGrid-grid-xs-4-33",
                      "grid-xs-5": "MuiGrid-grid-xs-5-34",
                      "grid-xs-6": "MuiGrid-grid-xs-6-35",
                      "grid-xs-7": "MuiGrid-grid-xs-7-36",
                      "grid-xs-8": "MuiGrid-grid-xs-8-37",
                      "grid-xs-9": "MuiGrid-grid-xs-9-38",
                      "grid-xs-auto": "MuiGrid-grid-xs-auto-28",
                      "grid-xs-true": "MuiGrid-grid-xs-true-29",
                      "item": "MuiGrid-item-2",
                      "justify-xs-center": "MuiGrid-justify-xs-center-18",
                      "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end-19",
                      "justify-xs-space-around": "MuiGrid-justify-xs-space-around-21",
                      "justify-xs-space-between": "MuiGrid-justify-xs-space-between-20",
                      "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly-22",
                      "spacing-xs-16": "MuiGrid-spacing-xs-16-24",
                      "spacing-xs-24": "MuiGrid-spacing-xs-24-25",
                      "spacing-xs-32": "MuiGrid-spacing-xs-32-26",
                      "spacing-xs-40": "MuiGrid-spacing-xs-40-27",
                      "spacing-xs-8": "MuiGrid-spacing-xs-8-23",
                      "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap-7",
                      "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse-8",
                      "zeroMinWidth": "MuiGrid-zeroMinWidth-3",
                    }
                  }
                  component="div"
                  container={true}
                  direction="row"
                  item={false}
                  justify="flex-start"
                  lg={false}
                  md={false}
                  sm={false}
                  spacing={8}
                  style={
                    Object {
                      "marginTop": 8,
                    }
                  }
                  wrap="wrap"
                  xl={false}
                  xs={false}
                  zeroMinWidth={false}
                >
                  <div
                    className="MuiGrid-container-1 MuiGrid-spacing-xs-8-23"
                    style={
                      Object {
                        "marginTop": 8,
                      }
                    }
                  >
                    <WithStyles(Grid)
                      item={true}
                      sm={true}
                      xs={12}
                    >
                      <Grid
                        alignContent="stretch"
                        alignItems="stretch"
                        classes={
                          Object {
                            "align-content-xs-center": "MuiGrid-align-content-xs-center-13",
                            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end-15",
                            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start-14",
                            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around-17",
                            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between-16",
                            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline-12",
                            "align-items-xs-center": "MuiGrid-align-items-xs-center-9",
                            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end-11",
                            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start-10",
                            "container": "MuiGrid-container-1",
                            "direction-xs-column": "MuiGrid-direction-xs-column-4",
                            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse-5",
                            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse-6",
                            "grid-lg-1": "MuiGrid-grid-lg-1-72",
                            "grid-lg-10": "MuiGrid-grid-lg-10-81",
                            "grid-lg-11": "MuiGrid-grid-lg-11-82",
                            "grid-lg-12": "MuiGrid-grid-lg-12-83",
                            "grid-lg-2": "MuiGrid-grid-lg-2-73",
                            "grid-lg-3": "MuiGrid-grid-lg-3-74",
                            "grid-lg-4": "MuiGrid-grid-lg-4-75",
                            "grid-lg-5": "MuiGrid-grid-lg-5-76",
                            "grid-lg-6": "MuiGrid-grid-lg-6-77",
                            "grid-lg-7": "MuiGrid-grid-lg-7-78",
                            "grid-lg-8": "MuiGrid-grid-lg-8-79",
                            "grid-lg-9": "MuiGrid-grid-lg-9-80",
                            "grid-lg-auto": "MuiGrid-grid-lg-auto-70",
                            "grid-lg-true": "MuiGrid-grid-lg-true-71",
                            "grid-md-1": "MuiGrid-grid-md-1-58",
                            "grid-md-10": "MuiGrid-grid-md-10-67",
                            "grid-md-11": "MuiGrid-grid-md-11-68",
                            "grid-md-12": "MuiGrid-grid-md-12-69",
                            "grid-md-2": "MuiGrid-grid-md-2-59",
                            "grid-md-3": "MuiGrid-grid-md-3-60",
                            "grid-md-4": "MuiGrid-grid-md-4-61",
                            "grid-md-5": "MuiGrid-grid-md-5-62",
                            "grid-md-6": "MuiGrid-grid-md-6-63",
                            "grid-md-7": "MuiGrid-grid-md-7-64",
                            "grid-md-8": "MuiGrid-grid-md-8-65",
                            "grid-md-9": "MuiGrid-grid-md-9-66",
                            "grid-md-auto": "MuiGrid-grid-md-auto-56",
                            "grid-md-true": "MuiGrid-grid-md-true-57",
                            "grid-sm-1": "MuiGrid-grid-sm-1-44",
                            "grid-sm-10": "MuiGrid-grid-sm-10-53",
                            "grid-sm-11": "MuiGrid-grid-sm-11-54",
                            "grid-sm-12": "MuiGrid-grid-sm-12-55",
                            "grid-sm-2": "MuiGrid-grid-sm-2-45",
                            "grid-sm-3": "MuiGrid-grid-sm-3-46",
                            "grid-sm-4": "MuiGrid-grid-sm-4-47",
                            "grid-sm-5": "MuiGrid-grid-sm-5-48",
                            "grid-sm-6": "MuiGrid-grid-sm-6-49",
                            "grid-sm-7": "MuiGrid-grid-sm-7-50",
                            "grid-sm-8": "MuiGrid-grid-sm-8-51",
                            "grid-sm-9": "MuiGrid-grid-sm-9-52",
                            "grid-sm-auto": "MuiGrid-grid-sm-auto-42",
                            "grid-sm-true": "MuiGrid-grid-sm-true-43",
                            "grid-xl-1": "MuiGrid-grid-xl-1-86",
                            "grid-xl-10": "MuiGrid-grid-xl-10-95",
                            "grid-xl-11": "MuiGrid-grid-xl-11-96",
                            "grid-xl-12": "MuiGrid-grid-xl-12-97",
                            "grid-xl-2": "MuiGrid-grid-xl-2-87",
                            "grid-xl-3": "MuiGrid-grid-xl-3-88",
                            "grid-xl-4": "MuiGrid-grid-xl-4-89",
                            "grid-xl-5": "MuiGrid-grid-xl-5-90",
                            "grid-xl-6": "MuiGrid-grid-xl-6-91",
                            "grid-xl-7": "MuiGrid-grid-xl-7-92",
                            "grid-xl-8": "MuiGrid-grid-xl-8-93",
                            "grid-xl-9": "MuiGrid-grid-xl-9-94",
                            "grid-xl-auto": "MuiGrid-grid-xl-auto-84",
                            "grid-xl-true": "MuiGrid-grid-xl-true-85",
                            "grid-xs-1": "MuiGrid-grid-xs-1-30",
                            "grid-xs-10": "MuiGrid-grid-xs-10-39",
                            "grid-xs-11": "MuiGrid-grid-xs-11-40",
                            "grid-xs-12": "MuiGrid-grid-xs-12-41",
                            "grid-xs-2": "MuiGrid-grid-xs-2-31",
                            "grid-xs-3": "MuiGrid-grid-xs-3-32",
                            "grid-xs-4": "MuiGrid-grid-xs-4-33",
                            "grid-xs-5": "MuiGrid-grid-xs-5-34",
                            "grid-xs-6": "MuiGrid-grid-xs-6-35",
                            "grid-xs-7": "MuiGrid-grid-xs-7-36",
                            "grid-xs-8": "MuiGrid-grid-xs-8-37",
                            "grid-xs-9": "MuiGrid-grid-xs-9-38",
                            "grid-xs-auto": "MuiGrid-grid-xs-auto-28",
                            "grid-xs-true": "MuiGrid-grid-xs-true-29",
                            "item": "MuiGrid-item-2",
                            "justify-xs-center": "MuiGrid-justify-xs-center-18",
                            "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end-19",
                            "justify-xs-space-around": "MuiGrid-justify-xs-space-around-21",
                            "justify-xs-space-between": "MuiGrid-justify-xs-space-between-20",
                            "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly-22",
                            "spacing-xs-16": "MuiGrid-spacing-xs-16-24",
                            "spacing-xs-24": "MuiGrid-spacing-xs-24-25",
                            "spacing-xs-32": "MuiGrid-spacing-xs-32-26",
                            "spacing-xs-40": "MuiGrid-spacing-xs-40-27",
                            "spacing-xs-8": "MuiGrid-spacing-xs-8-23",
                            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap-7",
                            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse-8",
                            "zeroMinWidth": "MuiGrid-zeroMinWidth-3",
                          }
                        }
                        component="div"
                        container={false}
                        direction="row"
                        item={true}
                        justify="flex-start"
                        lg={false}
                        md={false}
                        sm={true}
                        spacing={0}
                        wrap="wrap"
                        xl={false}
                        xs={12}
                        zeroMinWidth={false}
                      >
                        <div
                          className="MuiGrid-item-2 MuiGrid-grid-xs-12-41 MuiGrid-grid-sm-true-43"
                        >
                          <WithStyles(TextFieldWrapper)
                            autoComplete="off"
                            error={false}
                            fullWidth={true}
                            id="nameAsPublishedField"
                            label="Name as published"
                            onChange={[Function]}
                            onKeyDown={[Function]}
                            placeholder="Please type the name exactly as published"
                            required={false}
                            value=""
                          >
                            <TextFieldWrapper
                              autoComplete="off"
                              classes={Object {}}
                              error={false}
                              fullWidth={true}
                              id="nameAsPublishedField"
                              label="Name as published"
                              onChange={[Function]}
                              onKeyDown={[Function]}
                              placeholder="Please type the name exactly as published"
                              required={false}
                              value=""
                            >
                              <TextField
                                InputLabelProps={null}
                                autoComplete="off"
                                classes={Object {}}
                                error={false}
                                fullWidth={true}
                                id="nameAsPublishedField"
                                label="Name as published"
                                onChange={[Function]}
                                onKeyDown={[Function]}
                                placeholder="Please type the name exactly as published"
                                required={false}
                                select={false}
                                value=""
                                variant="standard"
                              >
                                <WithStyles(FormControl)
                                  classes={Object {}}
                                  error={false}
                                  fullWidth={true}
                                  onKeyDown={[Function]}
                                  required={false}
                                  variant="standard"
                                >
                                  <FormControl
                                    classes={
                                      Object {
                                        "fullWidth": "MuiFormControl-fullWidth-101",
                                        "marginDense": "MuiFormControl-marginDense-100",
                                        "marginNormal": "MuiFormControl-marginNormal-99",
                                        "root": "MuiFormControl-root-98",
                                      }
                                    }
                                    component="div"
                                    disabled={false}
                                    error={false}
                                    fullWidth={true}
                                    margin="none"
                                    onKeyDown={[Function]}
                                    required={false}
                                    variant="standard"
                                  >
                                    <div
                                      className="MuiFormControl-root-98 MuiFormControl-fullWidth-101"
                                      onKeyDown={[Function]}
                                    >
                                      <WithStyles(InputLabel)
                                        htmlFor="nameAsPublishedField"
                                      >
                                        <InputLabel
                                          classes={
                                            Object {
                                              "animated": "MuiInputLabel-animated-106",
                                              "filled": "MuiInputLabel-filled-107",
                                              "formControl": "MuiInputLabel-formControl-103",
                                              "marginDense": "MuiInputLabel-marginDense-104",
                                              "outlined": "MuiInputLabel-outlined-108",
                                              "root": "MuiInputLabel-root-102",
                                              "shrink": "MuiInputLabel-shrink-105",
                                            }
                                          }
                                          disableAnimation={false}
                                          htmlFor="nameAsPublishedField"
                                        >
                                          <WithStyles(FormLabel)
                                            className="MuiInputLabel-root-102 MuiInputLabel-formControl-103 MuiInputLabel-animated-106"
                                            data-shrink={false}
                                            htmlFor="nameAsPublishedField"
                                          >
                                            <FormLabel
                                              className="MuiInputLabel-root-102 MuiInputLabel-formControl-103 MuiInputLabel-animated-106"
                                              classes={
                                                Object {
                                                  "asterisk": "MuiFormLabel-asterisk-115",
                                                  "disabled": "MuiFormLabel-disabled-111",
                                                  "error": "MuiFormLabel-error-112",
                                                  "filled": "MuiFormLabel-filled-113",
                                                  "focused": "MuiFormLabel-focused-110",
                                                  "required": "MuiFormLabel-required-114",
                                                  "root": "MuiFormLabel-root-109",
                                                }
                                              }
                                              component="label"
                                              data-shrink={false}
                                              htmlFor="nameAsPublishedField"
                                            >
                                              <label
                                                className="MuiFormLabel-root-109 MuiInputLabel-root-102 MuiInputLabel-formControl-103 MuiInputLabel-animated-106"
                                                data-shrink={false}
                                                htmlFor="nameAsPublishedField"
                                              >
                                                Name as published
                                              </label>
                                            </FormLabel>
                                          </WithStyles(FormLabel)>
                                        </InputLabel>
                                      </WithStyles(InputLabel)>
                                      <WithStyles(Input)
                                        autoComplete="off"
                                        fullWidth={true}
                                        id="nameAsPublishedField"
                                        onChange={[Function]}
                                        placeholder="Please type the name exactly as published"
                                        value=""
                                      >
                                        <Input
                                          autoComplete="off"
                                          classes={
                                            Object {
                                              "disabled": "MuiInput-disabled-119",
                                              "error": "MuiInput-error-121",
                                              "focused": "MuiInput-focused-118",
                                              "formControl": "MuiInput-formControl-117",
                                              "fullWidth": "MuiInput-fullWidth-123",
                                              "input": "MuiInput-input-124",
                                              "inputMarginDense": "MuiInput-inputMarginDense-125",
                                              "inputMultiline": "MuiInput-inputMultiline-126",
                                              "inputType": "MuiInput-inputType-127",
                                              "inputTypeSearch": "MuiInput-inputTypeSearch-128",
                                              "multiline": "MuiInput-multiline-122",
                                              "root": "MuiInput-root-116",
                                              "underline": "MuiInput-underline-120",
                                            }
                                          }
                                          fullWidth={true}
                                          id="nameAsPublishedField"
                                          onChange={[Function]}
                                          placeholder="Please type the name exactly as published"
                                          value=""
                                        >
                                          <WithStyles(InputBase)
                                            autoComplete="off"
                                            classes={
                                              Object {
                                                "disabled": "MuiInput-disabled-119",
                                                "error": "MuiInput-error-121",
                                                "focused": "MuiInput-focused-118",
                                                "formControl": "MuiInput-formControl-117",
                                                "fullWidth": "MuiInput-fullWidth-123",
                                                "input": "MuiInput-input-124",
                                                "inputMarginDense": "MuiInput-inputMarginDense-125",
                                                "inputMultiline": "MuiInput-inputMultiline-126",
                                                "inputType": "MuiInput-inputType-127",
                                                "inputTypeSearch": "MuiInput-inputTypeSearch-128",
                                                "multiline": "MuiInput-multiline-122",
                                                "root": "MuiInput-root-116 MuiInput-underline-120",
                                                "underline": null,
                                              }
                                            }
                                            fullWidth={true}
                                            id="nameAsPublishedField"
                                            inputComponent="input"
                                            multiline={false}
                                            onChange={[Function]}
                                            placeholder="Please type the name exactly as published"
                                            type="text"
                                            value=""
                                          >
                                            <InputBase
                                              autoComplete="off"
                                              classes={
                                                Object {
                                                  "adornedEnd": "MuiInputBase-adornedEnd-134",
                                                  "adornedStart": "MuiInputBase-adornedStart-133",
                                                  "disabled": "MuiInputBase-disabled-132 MuiInput-disabled-119",
                                                  "error": "MuiInputBase-error-135 MuiInput-error-121",
                                                  "focused": "MuiInputBase-focused-131 MuiInput-focused-118",
                                                  "formControl": "MuiInputBase-formControl-130 MuiInput-formControl-117",
                                                  "fullWidth": "MuiInputBase-fullWidth-138 MuiInput-fullWidth-123",
                                                  "input": "MuiInputBase-input-139 MuiInput-input-124",
                                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd-145",
                                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart-144",
                                                  "inputMarginDense": "MuiInputBase-inputMarginDense-140 MuiInput-inputMarginDense-125",
                                                  "inputMultiline": "MuiInputBase-inputMultiline-141 MuiInput-inputMultiline-126",
                                                  "inputType": "MuiInputBase-inputType-142 MuiInput-inputType-127",
                                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch-143 MuiInput-inputTypeSearch-128",
                                                  "marginDense": "MuiInputBase-marginDense-136",
                                                  "multiline": "MuiInputBase-multiline-137 MuiInput-multiline-122",
                                                  "root": "MuiInputBase-root-129 MuiInput-root-116 MuiInput-underline-120",
                                                }
                                              }
                                              fullWidth={true}
                                              id="nameAsPublishedField"
                                              inputComponent="input"
                                              multiline={false}
                                              onChange={[Function]}
                                              placeholder="Please type the name exactly as published"
                                              type="text"
                                              value=""
                                            >
                                              <div
                                                className="MuiInputBase-root-129 MuiInput-root-116 MuiInput-underline-120 MuiInputBase-fullWidth-138 MuiInput-fullWidth-123 MuiInputBase-formControl-130 MuiInput-formControl-117"
                                                onClick={[Function]}
                                              >
                                                <input
                                                  aria-invalid={false}
                                                  autoComplete="off"
                                                  className="MuiInputBase-input-139 MuiInput-input-124"
                                                  disabled={false}
                                                  id="nameAsPublishedField"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  placeholder="Please type the name exactly as published"
                                                  required={false}
                                                  type="text"
                                                  value=""
                                                />
                                              </div>
                                            </InputBase>
                                          </WithStyles(InputBase)>
                                        </Input>
                                      </WithStyles(Input)>
                                    </div>
                                  </FormControl>
                                </WithStyles(FormControl)>
                              </TextField>
                            </TextFieldWrapper>
                          </WithStyles(TextFieldWrapper)>
                        </div>
                      </Grid>
                    </WithStyles(Grid)>
                    <WithStyles(Grid)
                      item={true}
                      style={
                        Object {
                          "marginBottom": 8,
                        }
                      }
                      xs={12}
                    >
                      <Grid
                        alignContent="stretch"
                        alignItems="stretch"
                        classes={
                          Object {
                            "align-content-xs-center": "MuiGrid-align-content-xs-center-13",
                            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end-15",
                            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start-14",
                            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around-17",
                            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between-16",
                            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline-12",
                            "align-items-xs-center": "MuiGrid-align-items-xs-center-9",
                            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end-11",
                            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start-10",
                            "container": "MuiGrid-container-1",
                            "direction-xs-column": "MuiGrid-direction-xs-column-4",
                            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse-5",
                            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse-6",
                            "grid-lg-1": "MuiGrid-grid-lg-1-72",
                            "grid-lg-10": "MuiGrid-grid-lg-10-81",
                            "grid-lg-11": "MuiGrid-grid-lg-11-82",
                            "grid-lg-12": "MuiGrid-grid-lg-12-83",
                            "grid-lg-2": "MuiGrid-grid-lg-2-73",
                            "grid-lg-3": "MuiGrid-grid-lg-3-74",
                            "grid-lg-4": "MuiGrid-grid-lg-4-75",
                            "grid-lg-5": "MuiGrid-grid-lg-5-76",
                            "grid-lg-6": "MuiGrid-grid-lg-6-77",
                            "grid-lg-7": "MuiGrid-grid-lg-7-78",
                            "grid-lg-8": "MuiGrid-grid-lg-8-79",
                            "grid-lg-9": "MuiGrid-grid-lg-9-80",
                            "grid-lg-auto": "MuiGrid-grid-lg-auto-70",
                            "grid-lg-true": "MuiGrid-grid-lg-true-71",
                            "grid-md-1": "MuiGrid-grid-md-1-58",
                            "grid-md-10": "MuiGrid-grid-md-10-67",
                            "grid-md-11": "MuiGrid-grid-md-11-68",
                            "grid-md-12": "MuiGrid-grid-md-12-69",
                            "grid-md-2": "MuiGrid-grid-md-2-59",
                            "grid-md-3": "MuiGrid-grid-md-3-60",
                            "grid-md-4": "MuiGrid-grid-md-4-61",
                            "grid-md-5": "MuiGrid-grid-md-5-62",
                            "grid-md-6": "MuiGrid-grid-md-6-63",
                            "grid-md-7": "MuiGrid-grid-md-7-64",
                            "grid-md-8": "MuiGrid-grid-md-8-65",
                            "grid-md-9": "MuiGrid-grid-md-9-66",
                            "grid-md-auto": "MuiGrid-grid-md-auto-56",
                            "grid-md-true": "MuiGrid-grid-md-true-57",
                            "grid-sm-1": "MuiGrid-grid-sm-1-44",
                            "grid-sm-10": "MuiGrid-grid-sm-10-53",
                            "grid-sm-11": "MuiGrid-grid-sm-11-54",
                            "grid-sm-12": "MuiGrid-grid-sm-12-55",
                            "grid-sm-2": "MuiGrid-grid-sm-2-45",
                            "grid-sm-3": "MuiGrid-grid-sm-3-46",
                            "grid-sm-4": "MuiGrid-grid-sm-4-47",
                            "grid-sm-5": "MuiGrid-grid-sm-5-48",
                            "grid-sm-6": "MuiGrid-grid-sm-6-49",
                            "grid-sm-7": "MuiGrid-grid-sm-7-50",
                            "grid-sm-8": "MuiGrid-grid-sm-8-51",
                            "grid-sm-9": "MuiGrid-grid-sm-9-52",
                            "grid-sm-auto": "MuiGrid-grid-sm-auto-42",
                            "grid-sm-true": "MuiGrid-grid-sm-true-43",
                            "grid-xl-1": "MuiGrid-grid-xl-1-86",
                            "grid-xl-10": "MuiGrid-grid-xl-10-95",
                            "grid-xl-11": "MuiGrid-grid-xl-11-96",
                            "grid-xl-12": "MuiGrid-grid-xl-12-97",
                            "grid-xl-2": "MuiGrid-grid-xl-2-87",
                            "grid-xl-3": "MuiGrid-grid-xl-3-88",
                            "grid-xl-4": "MuiGrid-grid-xl-4-89",
                            "grid-xl-5": "MuiGrid-grid-xl-5-90",
                            "grid-xl-6": "MuiGrid-grid-xl-6-91",
                            "grid-xl-7": "MuiGrid-grid-xl-7-92",
                            "grid-xl-8": "MuiGrid-grid-xl-8-93",
                            "grid-xl-9": "MuiGrid-grid-xl-9-94",
                            "grid-xl-auto": "MuiGrid-grid-xl-auto-84",
                            "grid-xl-true": "MuiGrid-grid-xl-true-85",
                            "grid-xs-1": "MuiGrid-grid-xs-1-30",
                            "grid-xs-10": "MuiGrid-grid-xs-10-39",
                            "grid-xs-11": "MuiGrid-grid-xs-11-40",
                            "grid-xs-12": "MuiGrid-grid-xs-12-41",
                            "grid-xs-2": "MuiGrid-grid-xs-2-31",
                            "grid-xs-3": "MuiGrid-grid-xs-3-32",
                            "grid-xs-4": "MuiGrid-grid-xs-4-33",
                            "grid-xs-5": "MuiGrid-grid-xs-5-34",
                            "grid-xs-6": "MuiGrid-grid-xs-6-35",
                            "grid-xs-7": "MuiGrid-grid-xs-7-36",
                            "grid-xs-8": "MuiGrid-grid-xs-8-37",
                            "grid-xs-9": "MuiGrid-grid-xs-9-38",
                            "grid-xs-auto": "MuiGrid-grid-xs-auto-28",
                            "grid-xs-true": "MuiGrid-grid-xs-true-29",
                            "item": "MuiGrid-item-2",
                            "justify-xs-center": "MuiGrid-justify-xs-center-18",
                            "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end-19",
                            "justify-xs-space-around": "MuiGrid-justify-xs-space-around-21",
                            "justify-xs-space-between": "MuiGrid-justify-xs-space-between-20",
                            "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly-22",
                            "spacing-xs-16": "MuiGrid-spacing-xs-16-24",
                            "spacing-xs-24": "MuiGrid-spacing-xs-24-25",
                            "spacing-xs-32": "MuiGrid-spacing-xs-32-26",
                            "spacing-xs-40": "MuiGrid-spacing-xs-40-27",
                            "spacing-xs-8": "MuiGrid-spacing-xs-8-23",
                            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap-7",
                            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse-8",
                            "zeroMinWidth": "MuiGrid-zeroMinWidth-3",
                          }
                        }
                        component="div"
                        container={false}
                        direction="row"
                        item={true}
                        justify="flex-start"
                        lg={false}
                        md={false}
                        sm={false}
                        spacing={0}
                        style={
                          Object {
                            "marginBottom": 8,
                          }
                        }
                        wrap="wrap"
                        xl={false}
                        xs={12}
                        zeroMinWidth={false}
                      >
                        <div
                          className="MuiGrid-item-2 MuiGrid-grid-xs-12-41"
                          style={
                            Object {
                              "marginBottom": 8,
                            }
                          }
                        >
                          <WithStyles(Button)
                            color="primary"
                            disabled={true}
                            fullWidth={true}
                            id="submit-author"
                            onClick={[Function]}
                            variant="contained"
                          >
                            <Button
                              classes={
                                Object {
                                  "colorInherit": "MuiButton-colorInherit-167",
                                  "contained": "MuiButton-contained-157",
                                  "containedPrimary": "MuiButton-containedPrimary-158",
                                  "containedSecondary": "MuiButton-containedSecondary-159",
                                  "disabled": "MuiButton-disabled-166",
                                  "extendedFab": "MuiButton-extendedFab-164",
                                  "fab": "MuiButton-fab-163",
                                  "flat": "MuiButton-flat-151",
                                  "flatPrimary": "MuiButton-flatPrimary-152",
                                  "flatSecondary": "MuiButton-flatSecondary-153",
                                  "focusVisible": "MuiButton-focusVisible-165",
                                  "fullWidth": "MuiButton-fullWidth-171",
                                  "label": "MuiButton-label-147",
                                  "mini": "MuiButton-mini-168",
                                  "outlined": "MuiButton-outlined-154",
                                  "outlinedPrimary": "MuiButton-outlinedPrimary-155",
                                  "outlinedSecondary": "MuiButton-outlinedSecondary-156",
                                  "raised": "MuiButton-raised-160",
                                  "raisedPrimary": "MuiButton-raisedPrimary-161",
                                  "raisedSecondary": "MuiButton-raisedSecondary-162",
                                  "root": "MuiButton-root-146",
                                  "sizeLarge": "MuiButton-sizeLarge-170",
                                  "sizeSmall": "MuiButton-sizeSmall-169",
                                  "text": "MuiButton-text-148",
                                  "textPrimary": "MuiButton-textPrimary-149",
                                  "textSecondary": "MuiButton-textSecondary-150",
                                }
                              }
                              color="primary"
                              component="button"
                              disableFocusRipple={false}
                              disabled={true}
                              fullWidth={true}
                              id="submit-author"
                              mini={false}
                              onClick={[Function]}
                              size="medium"
                              type="button"
                              variant="contained"
                            >
                              <WithStyles(ButtonBase)
                                className="MuiButton-root-146 MuiButton-contained-157 MuiButton-containedPrimary-158 MuiButton-raised-160 MuiButton-raisedPrimary-161 MuiButton-disabled-166 MuiButton-fullWidth-171"
                                component="button"
                                disabled={true}
                                focusRipple={true}
                                focusVisibleClassName="MuiButton-focusVisible-165"
                                id="submit-author"
                                onClick={[Function]}
                                type="button"
                              >
                                <ButtonBase
                                  centerRipple={false}
                                  className="MuiButton-root-146 MuiButton-contained-157 MuiButton-containedPrimary-158 MuiButton-raised-160 MuiButton-raisedPrimary-161 MuiButton-disabled-166 MuiButton-fullWidth-171"
                                  classes={
                                    Object {
                                      "disabled": "MuiButtonBase-disabled-173",
                                      "focusVisible": "MuiButtonBase-focusVisible-174",
                                      "root": "MuiButtonBase-root-172",
                                    }
                                  }
                                  component="button"
                                  disableRipple={false}
                                  disableTouchRipple={false}
                                  disabled={true}
                                  focusRipple={true}
                                  focusVisibleClassName="MuiButton-focusVisible-165"
                                  id="submit-author"
                                  onClick={[Function]}
                                  tabIndex="0"
                                  type="button"
                                >
                                  <button
                                    className="MuiButtonBase-root-172 MuiButtonBase-disabled-173 MuiButton-root-146 MuiButton-contained-157 MuiButton-containedPrimary-158 MuiButton-raised-160 MuiButton-raisedPrimary-161 MuiButton-disabled-166 MuiButton-fullWidth-171"
                                    disabled={true}
                                    id="submit-author"
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    onMouseDown={[Function]}
                                    onMouseLeave={[Function]}
                                    onMouseUp={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchMove={[Function]}
                                    onTouchStart={[Function]}
                                    tabIndex="-1"
                                    type="button"
                                  >
                                    <span
                                      className="MuiButton-label-147"
                                    >
                                      Add author
                                    </span>
                                  </button>
                                </ButtonBase>
                              </WithStyles(ButtonBase)>
                            </Button>
                          </WithStyles(Button)>
                        </div>
                      </Grid>
                    </WithStyles(Grid)>
                  </div>
                </Grid>
              </WithStyles(Grid)>
            </ContributorForm>
          </Connect(ContributorForm)>
        </MuiPickersUtilsProvider>
      </MuiThemeProvider>
    </Router>
  </MemoryRouter>
</Provider>
`;

exports[`Component ContributorForm should render display name field and identifier field 1`] = `
<Fragment>
  <WithStyles(Grid)
    container={true}
    spacing={8}
    style={
      Object {
        "marginTop": 8,
      }
    }
  >
    <WithStyles(Grid)
      item={true}
      sm={true}
      xs={12}
    >
      <WithStyles(TextFieldWrapper)
        autoComplete="off"
        disabled={false}
        error={false}
        fullWidth={true}
        id="nameAsPublishedField"
        onChange={[Function]}
        onKeyDown={[Function]}
        required={false}
        value=""
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      sm={3}
      xs={12}
    >
      <Connect(WithStyles(AutoCompleteAsyncField))
        disabled={true}
        floatingLabelText="UQ Author ID"
        hintText="Type UQ author name to search"
        id="identifierField"
        onChange={[Function]}
        value=""
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      style={
        Object {
          "marginBottom": 8,
        }
      }
      xs={12}
    >
      <WithStyles(Button)
        color="primary"
        disabled={true}
        fullWidth={true}
        id="submit-author"
        onClick={[Function]}
        variant="contained"
      />
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</Fragment>
`;

exports[`Component ContributorForm should render display name field and role field 1`] = `
<Fragment>
  <WithStyles(Grid)
    container={true}
    spacing={8}
    style={
      Object {
        "marginTop": 8,
      }
    }
  >
    <WithStyles(Grid)
      item={true}
      sm={true}
      xs={12}
    >
      <WithStyles(TextFieldWrapper)
        autoComplete="off"
        disabled={false}
        error={false}
        fullWidth={true}
        id="nameAsPublishedField"
        onChange={[Function]}
        onKeyDown={[Function]}
        required={false}
        value=""
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      md={5}
      sm={12}
      xs={12}
    >
      <Connect(WithStyles(AutoCompleteAsyncField))
        autoComplete="off"
        clearInput={true}
        disabled={true}
        error={false}
        fullWidth={true}
        id="creatorRoleField"
        onChange={[Function]}
        required={false}
        value=""
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      style={
        Object {
          "marginBottom": 8,
        }
      }
      xs={12}
    >
      <WithStyles(Button)
        color="primary"
        disabled={true}
        fullWidth={true}
        id="submit-author"
        onClick={[Function]}
        variant="contained"
      />
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</Fragment>
`;

exports[`Component ContributorForm should render display name field only 1`] = `
<Fragment>
  <WithStyles(Grid)
    container={true}
    spacing={8}
    style={
      Object {
        "marginTop": 8,
      }
    }
  >
    <WithStyles(Grid)
      item={true}
      sm={true}
      xs={12}
    >
      <WithStyles(TextFieldWrapper)
        autoComplete="off"
        disabled={false}
        error={false}
        fullWidth={true}
        id="nameAsPublishedField"
        onChange={[Function]}
        onKeyDown={[Function]}
        required={false}
        value=""
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      style={
        Object {
          "marginBottom": 8,
        }
      }
      xs={12}
    >
      <WithStyles(Button)
        color="primary"
        disabled={true}
        fullWidth={true}
        id="submit-author"
        onClick={[Function]}
        variant="contained"
      />
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</Fragment>
`;

exports[`Component ContributorForm should show contributor assignment 1`] = `
<Fragment>
  Step 1 description
  <WithStyles(Grid)
    container={true}
    spacing={8}
    style={
      Object {
        "marginTop": 8,
      }
    }
  >
    <WithStyles(Grid)
      item={true}
      sm={true}
      xs={12}
    >
      <WithStyles(TextFieldWrapper)
        autoComplete="off"
        disabled={false}
        error={false}
        fullWidth={true}
        id="nameAsPublishedField"
        onChange={[Function]}
        onKeyDown={[Function]}
        required={false}
        value=""
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      style={
        Object {
          "marginBottom": 8,
        }
      }
      xs={12}
    >
      <WithStyles(Button)
        color="primary"
        disabled={true}
        fullWidth={true}
        id="submit-author"
        onClick={[Function]}
        variant="contained"
      />
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</Fragment>
`;

exports[`Component ContributorForm should show error regarding affiliation type selector 1`] = `
<Fragment>
  <WithStyles(Grid)
    container={true}
    spacing={8}
    style={
      Object {
        "marginTop": 8,
      }
    }
  >
    <WithStyles(Grid)
      item={true}
      sm={2}
      xs={12}
    >
      <OrgAffilicationTypeSelector
        affiliation=""
        disabled={false}
        error={true}
        locale={
          Object {
            "inputLabel": "Org affiliation",
            "options": Array [
              Object {
                "key": "UQ",
                "value": "UQ",
              },
              Object {
                "key": "NotUQ",
                "value": "Not UQ",
              },
            ],
            "placeholder": "Organisational affiliation at time of publication",
          }
        }
        onAffiliationChange={[Function]}
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      sm={true}
      xs={12}
    >
      <WithStyles(TextFieldWrapper)
        autoComplete="off"
        disabled={true}
        error={false}
        fullWidth={true}
        id="nameAsPublishedField"
        onChange={[Function]}
        onKeyDown={[Function]}
        required={true}
        value=""
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      style={
        Object {
          "marginBottom": 8,
        }
      }
      xs={12}
    >
      <WithStyles(Button)
        color="primary"
        disabled={true}
        fullWidth={true}
        id="submit-author"
        onClick={[Function]}
        variant="contained"
      />
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</Fragment>
`;

exports[`Component ContributorForm should show error regarding name field 1`] = `
<Fragment>
  <WithStyles(Grid)
    container={true}
    spacing={8}
    style={
      Object {
        "marginTop": 8,
      }
    }
  >
    <WithStyles(Grid)
      item={true}
      sm={true}
      xs={12}
    >
      <WithStyles(TextFieldWrapper)
        autoComplete="off"
        disabled={false}
        error={true}
        fullWidth={true}
        id="nameAsPublishedField"
        onChange={[Function]}
        onKeyDown={[Function]}
        required={true}
        value=""
      />
    </WithStyles(Grid)>
    <WithStyles(Grid)
      item={true}
      style={
        Object {
          "marginBottom": 8,
        }
      }
      xs={12}
    >
      <WithStyles(Button)
        color="primary"
        disabled={true}
        fullWidth={true}
        id="submit-author"
        onClick={[Function]}
        variant="contained"
      />
    </WithStyles(Grid)>
  </WithStyles(Grid)>
</Fragment>
`;
